
testdiscspi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800824c  0800824c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800824c  0800824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008254  08008254  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800825c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000009d4  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a5c  20000a5c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000126dd  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000314c  00000000  00000000  000327d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f40  00000000  00000000  00035928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b95  00000000  00000000  00036868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002297d  00000000  00000000  000373fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000148b1  00000000  00000000  00059d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9987  00000000  00000000  0006e62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000427c  00000000  00000000  00137fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008218 	.word	0x08008218

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08008218 	.word	0x08008218

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb6a 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f818 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8e4 	bl	800069c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f87e 	bl	80005d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8aa 	bl	8000630 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f007 fa46 	bl	800796c <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_SPI_Transmit(&hspi1, buffer_tx, 10, 100);
 80004e0:	2364      	movs	r3, #100	; 0x64
 80004e2:	220a      	movs	r2, #10
 80004e4:	4904      	ldr	r1, [pc, #16]	; (80004f8 <main+0x34>)
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x38>)
 80004e8:	f003 fe23 	bl	8004132 <HAL_SPI_Transmit>
	 	  HAL_Delay(100);
 80004ec:	2064      	movs	r0, #100	; 0x64
 80004ee:	f000 fbc9 	bl	8000c84 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f2:	f007 fa61 	bl	80079b8 <MX_USB_HOST_Process>
	  HAL_SPI_Transmit(&hspi1, buffer_tx, 10, 100);
 80004f6:	e7f3      	b.n	80004e0 <main+0x1c>
 80004f8:	20000000 	.word	0x20000000
 80004fc:	200000f8 	.word	0x200000f8

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 fdf2 	bl	80080f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f003 f8c6 	bl	8003718 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 f991 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fb27 	bl	8003c08 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c0:	f000 f97a 	bl	80008b8 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_I2C1_Init+0x50>)
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <MX_I2C1_Init+0x54>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_I2C1_Init+0x58>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_I2C1_Init+0x50>)
 80005f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_I2C1_Init+0x50>)
 8000612:	f002 ff3d 	bl	8003490 <HAL_I2C_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 f94c 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000a4 	.word	0x200000a4
 8000628:	40005400 	.word	0x40005400
 800062c:	000186a0 	.word	0x000186a0

08000630 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_SPI1_Init+0x64>)
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <MX_SPI1_Init+0x68>)
 8000638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_SPI1_Init+0x64>)
 800063c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_SPI1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_SPI1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_SPI1_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_SPI1_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_SPI1_Init+0x64>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_SPI1_Init+0x64>)
 8000664:	2238      	movs	r2, #56	; 0x38
 8000666:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_SPI1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_SPI1_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_SPI1_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_SPI1_Init+0x64>)
 800067c:	220a      	movs	r2, #10
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_SPI1_Init+0x64>)
 8000682:	f003 fccd 	bl	8004020 <HAL_SPI_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800068c:	f000 f914 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000f8 	.word	0x200000f8
 8000698:	40013000 	.word	0x40013000

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	4b7a      	ldr	r3, [pc, #488]	; (80008a0 <MX_GPIO_Init+0x204>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a79      	ldr	r2, [pc, #484]	; (80008a0 <MX_GPIO_Init+0x204>)
 80006bc:	f043 0310 	orr.w	r3, r3, #16
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b77      	ldr	r3, [pc, #476]	; (80008a0 <MX_GPIO_Init+0x204>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0310 	and.w	r3, r3, #16
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	4b73      	ldr	r3, [pc, #460]	; (80008a0 <MX_GPIO_Init+0x204>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a72      	ldr	r2, [pc, #456]	; (80008a0 <MX_GPIO_Init+0x204>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b70      	ldr	r3, [pc, #448]	; (80008a0 <MX_GPIO_Init+0x204>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b6c      	ldr	r3, [pc, #432]	; (80008a0 <MX_GPIO_Init+0x204>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a6b      	ldr	r2, [pc, #428]	; (80008a0 <MX_GPIO_Init+0x204>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b69      	ldr	r3, [pc, #420]	; (80008a0 <MX_GPIO_Init+0x204>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b65      	ldr	r3, [pc, #404]	; (80008a0 <MX_GPIO_Init+0x204>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a64      	ldr	r2, [pc, #400]	; (80008a0 <MX_GPIO_Init+0x204>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b62      	ldr	r3, [pc, #392]	; (80008a0 <MX_GPIO_Init+0x204>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b5e      	ldr	r3, [pc, #376]	; (80008a0 <MX_GPIO_Init+0x204>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a5d      	ldr	r2, [pc, #372]	; (80008a0 <MX_GPIO_Init+0x204>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b5b      	ldr	r3, [pc, #364]	; (80008a0 <MX_GPIO_Init+0x204>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b57      	ldr	r3, [pc, #348]	; (80008a0 <MX_GPIO_Init+0x204>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a56      	ldr	r2, [pc, #344]	; (80008a0 <MX_GPIO_Init+0x204>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <MX_GPIO_Init+0x204>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2108      	movs	r1, #8
 800075e:	4851      	ldr	r0, [pc, #324]	; (80008a4 <MX_GPIO_Init+0x208>)
 8000760:	f000 fd62 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	484f      	ldr	r0, [pc, #316]	; (80008a8 <MX_GPIO_Init+0x20c>)
 800076a:	f000 fd5d 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800076e:	2200      	movs	r2, #0
 8000770:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000774:	484d      	ldr	r0, [pc, #308]	; (80008ac <MX_GPIO_Init+0x210>)
 8000776:	f000 fd57 	bl	8001228 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800077a:	2308      	movs	r3, #8
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4844      	ldr	r0, [pc, #272]	; (80008a4 <MX_GPIO_Init+0x208>)
 8000792:	f000 fbad 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000796:	2301      	movs	r3, #1
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	483e      	ldr	r0, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x20c>)
 80007ae:	f000 fb9f 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007b2:	2308      	movs	r3, #8
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007c2:	2305      	movs	r3, #5
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4836      	ldr	r0, [pc, #216]	; (80008a8 <MX_GPIO_Init+0x20c>)
 80007ce:	f000 fb8f 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4832      	ldr	r0, [pc, #200]	; (80008b0 <MX_GPIO_Init+0x214>)
 80007e8:	f000 fb82 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007ec:	2304      	movs	r3, #4
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	482d      	ldr	r0, [pc, #180]	; (80008b4 <MX_GPIO_Init+0x218>)
 8000800:	f000 fb76 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000816:	2305      	movs	r3, #5
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4824      	ldr	r0, [pc, #144]	; (80008b4 <MX_GPIO_Init+0x218>)
 8000822:	f000 fb65 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000826:	f24f 0310 	movw	r3, #61456	; 0xf010
 800082a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	481b      	ldr	r0, [pc, #108]	; (80008ac <MX_GPIO_Init+0x210>)
 8000840:	f000 fb56 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000844:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000856:	2306      	movs	r3, #6
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_GPIO_Init+0x20c>)
 8000862:	f000 fb45 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000866:	2320      	movs	r3, #32
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_GPIO_Init+0x210>)
 800087a:	f000 fb39 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800087e:	2302      	movs	r3, #2
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000882:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0x208>)
 8000894:	f000 fb2c 	bl	8000ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000898:	bf00      	nop
 800089a:	3730      	adds	r7, #48	; 0x30
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020c00 	.word	0x40020c00
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020400 	.word	0x40020400

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000902:	2007      	movs	r0, #7
 8000904:	f000 fab2 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <HAL_I2C_MspInit+0x84>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d12c      	bne.n	8000990 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_I2C_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_I2C_MspInit+0x88>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_I2C_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000952:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000958:	2312      	movs	r3, #18
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095c:	2301      	movs	r3, #1
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000964:	2304      	movs	r3, #4
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <HAL_I2C_MspInit+0x8c>)
 8000970:	f000 fabe 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_I2C_MspInit+0x88>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <HAL_I2C_MspInit+0x88>)
 800097e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_I2C_MspInit+0x88>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40005400 	.word	0x40005400
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400

080009a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <HAL_SPI_MspInit+0xa4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d13b      	bne.n	8000a3e <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <HAL_SPI_MspInit+0xa8>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_SPI_MspInit+0xa8>)
 80009d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <HAL_SPI_MspInit+0xa8>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_SPI_MspInit+0xa8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <HAL_SPI_MspInit+0xa8>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_SPI_MspInit+0xa8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009fe:	2310      	movs	r3, #16
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <HAL_SPI_MspInit+0xac>)
 8000a1a:	f000 fa69 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a1e:	23e0      	movs	r3, #224	; 0xe0
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_SPI_MspInit+0xac>)
 8000a3a:	f000 fa59 	bl	8000ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40013000 	.word	0x40013000
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f8d0 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <OTG_FS_IRQHandler+0x10>)
 8000aae:	f000 feb5 	bl	800181c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000534 	.word	0x20000534

08000abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <_sbrk+0x5c>)
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <_sbrk+0x60>)
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_sbrk+0x64>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <_sbrk+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d207      	bcs.n	8000afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aec:	f007 fb1c 	bl	8008128 <__errno>
 8000af0:	4603      	mov	r3, r0
 8000af2:	220c      	movs	r2, #12
 8000af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	e009      	b.n	8000b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <_sbrk+0x64>)
 8000b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20020000 	.word	0x20020000
 8000b1c:	00000400 	.word	0x00000400
 8000b20:	20000150 	.word	0x20000150
 8000b24:	20000a60 	.word	0x20000a60

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b50:	f7ff ffea 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f007 fadb 	bl	8008134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fca1 	bl	80004c4 <main>
  bx  lr    
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b90:	0800825c 	.word	0x0800825c
  ldr r2, =_sbss
 8000b94:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000b98:	20000a5c 	.word	0x20000a5c

08000b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f94f 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fe76 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f967 	bl	8000ed6 <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 f92f 	bl	8000e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000000c 	.word	0x2000000c
 8000c3c:	20000014 	.word	0x20000014
 8000c40:	20000010 	.word	0x20000010

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000014 	.word	0x20000014
 8000c68:	20000154 	.word	0x20000154

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000154 	.word	0x20000154

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000014 	.word	0x20000014

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e38:	d301      	bcc.n	8000e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00f      	b.n	8000e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <SysTick_Config+0x40>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e46:	210f      	movs	r1, #15
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f7ff ff8e 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <SysTick_Config+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <SysTick_Config+0x40>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	e000e010 	.word	0xe000e010

08000e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff29 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e94:	f7ff ff3e 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68b9      	ldr	r1, [r7, #8]
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f7ff ff8e 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff31 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ffa2 	bl	8000e28 <SysTick_Config>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e16b      	b.n	80011e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 815a 	bne.w	80011de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d005      	beq.n	8000f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b4 	beq.w	80011de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b60      	ldr	r3, [pc, #384]	; (80011fc <HAL_GPIO_Init+0x30c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a5f      	ldr	r2, [pc, #380]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a5b      	ldr	r2, [pc, #364]	; (8001200 <HAL_GPIO_Init+0x310>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_GPIO_Init+0x314>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d02b      	beq.n	8001116 <HAL_GPIO_Init+0x226>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_GPIO_Init+0x318>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x222>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a50      	ldr	r2, [pc, #320]	; (800120c <HAL_GPIO_Init+0x31c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x21e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4f      	ldr	r2, [pc, #316]	; (8001210 <HAL_GPIO_Init+0x320>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4e      	ldr	r2, [pc, #312]	; (8001214 <HAL_GPIO_Init+0x324>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <HAL_GPIO_Init+0x328>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <HAL_GPIO_Init+0x32c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4b      	ldr	r2, [pc, #300]	; (8001220 <HAL_GPIO_Init+0x330>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x20a>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e00e      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fa:	2308      	movs	r3, #8
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4935      	ldr	r1, [pc, #212]	; (8001200 <HAL_GPIO_Init+0x310>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <HAL_GPIO_Init+0x334>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <HAL_GPIO_Init+0x334>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_GPIO_Init+0x334>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <HAL_GPIO_Init+0x334>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_GPIO_Init+0x334>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_GPIO_Init+0x334>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_GPIO_Init+0x334>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <HAL_GPIO_Init+0x334>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f ae90 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40013800 	.word	0x40013800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40021400 	.word	0x40021400
 800121c:	40021800 	.word	0x40021800
 8001220:	40021c00 	.word	0x40021c00
 8001224:	40013c00 	.word	0x40013c00

08001228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001244:	e003      	b.n	800124e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	041a      	lsls	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af02      	add	r7, sp, #8
 8001260:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e059      	b.n	8001320 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d106      	bne.n	800128c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f006 fbce 	bl	8007a28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2203      	movs	r2, #3
 8001290:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129a:	d102      	bne.n	80012a2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 f9d7 	bl	800465a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7c1a      	ldrb	r2, [r3, #16]
 80012b4:	f88d 2000 	strb.w	r2, [sp]
 80012b8:	3304      	adds	r3, #4
 80012ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012bc:	f003 f958 	bl	8004570 <USB_CoreInit>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2202      	movs	r2, #2
 80012ca:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e026      	b.n	8001320 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2101      	movs	r1, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 f9cf 	bl	800467c <USB_SetCurrentMode>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2202      	movs	r2, #2
 80012e8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e017      	b.n	8001320 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7c1a      	ldrb	r2, [r3, #16]
 80012f8:	f88d 2000 	strb.w	r2, [sp]
 80012fc:	3304      	adds	r3, #4
 80012fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001300:	f003 fb72 	bl	80049e8 <USB_HostInit>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2202      	movs	r2, #2
 800130e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e004      	b.n	8001320 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b08b      	sub	sp, #44	; 0x2c
 800132c:	af04      	add	r7, sp, #16
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4603      	mov	r3, r0
 8001338:	70fb      	strb	r3, [r7, #3]
 800133a:	460b      	mov	r3, r1
 800133c:	70bb      	strb	r3, [r7, #2]
 800133e:	4613      	mov	r3, r2
 8001340:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001342:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001344:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_HCD_HC_Init+0x2c>
 8001350:	2302      	movs	r3, #2
 8001352:	e09d      	b.n	8001490 <HAL_HCD_HC_Init+0x168>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800135c:	78fa      	ldrb	r2, [r7, #3]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	1a9b      	subs	r3, r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	3319      	adds	r3, #25
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3314      	adds	r3, #20
 8001380:	787a      	ldrb	r2, [r7, #1]
 8001382:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001384:	78fa      	ldrb	r2, [r7, #3]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	3315      	adds	r3, #21
 8001394:	78fa      	ldrb	r2, [r7, #3]
 8001396:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	3326      	adds	r3, #38	; 0x26
 80013a8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80013ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80013ae:	78fa      	ldrb	r2, [r7, #3]
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013b6:	b2d8      	uxtb	r0, r3
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	3316      	adds	r3, #22
 80013c6:	4602      	mov	r2, r0
 80013c8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	4619      	mov	r1, r3
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fbc8 	bl	8001b64 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80013d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da0a      	bge.n	80013f2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80013dc:	78fa      	ldrb	r2, [r7, #3]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	3317      	adds	r3, #23
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	e009      	b.n	8001406 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80013f2:	78fa      	ldrb	r2, [r7, #3]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	3317      	adds	r3, #23
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fc50 	bl	8004cb0 <USB_GetHostSpeed>
 8001410:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001412:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10b      	bne.n	8001432 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800141a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_HCD_HC_Init+0x10a>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d104      	bne.n	8001432 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2bbc      	cmp	r3, #188	; 0xbc
 800142c:	d901      	bls.n	8001432 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800142e:	23bc      	movs	r3, #188	; 0xbc
 8001430:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001432:	78fa      	ldrb	r2, [r7, #3]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	3318      	adds	r3, #24
 8001442:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001446:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	b298      	uxth	r0, r3
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3328      	adds	r3, #40	; 0x28
 800145c:	4602      	mov	r2, r0
 800145e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	b29b      	uxth	r3, r3
 8001468:	787c      	ldrb	r4, [r7, #1]
 800146a:	78ba      	ldrb	r2, [r7, #2]
 800146c:	78f9      	ldrb	r1, [r7, #3]
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4623      	mov	r3, r4
 800147e:	f003 fc3f 	bl	8004d00 <USB_HC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}

08001498 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_HCD_HC_Halt+0x1e>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e00f      	b.n	80014d6 <HAL_HCD_HC_Halt+0x3e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	78fa      	ldrb	r2, [r7, #3]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 ffd1 	bl	800546e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	4608      	mov	r0, r1
 80014ea:	4611      	mov	r1, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4603      	mov	r3, r0
 80014f0:	70fb      	strb	r3, [r7, #3]
 80014f2:	460b      	mov	r3, r1
 80014f4:	70bb      	strb	r3, [r7, #2]
 80014f6:	4613      	mov	r3, r2
 80014f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80014fa:	78fa      	ldrb	r2, [r7, #3]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	3317      	adds	r3, #23
 800150a:	78ba      	ldrb	r2, [r7, #2]
 800150c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3326      	adds	r3, #38	; 0x26
 800151e:	787a      	ldrb	r2, [r7, #1]
 8001520:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001522:	7c3b      	ldrb	r3, [r7, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d114      	bne.n	8001552 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001528:	78fa      	ldrb	r2, [r7, #3]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	332a      	adds	r3, #42	; 0x2a
 8001538:	2203      	movs	r2, #3
 800153a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	3319      	adds	r3, #25
 800154c:	7f3a      	ldrb	r2, [r7, #28]
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e009      	b.n	8001566 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	332a      	adds	r3, #42	; 0x2a
 8001562:	2202      	movs	r2, #2
 8001564:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001566:	787b      	ldrb	r3, [r7, #1]
 8001568:	2b03      	cmp	r3, #3
 800156a:	f200 8102 	bhi.w	8001772 <HAL_HCD_HC_SubmitRequest+0x292>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	08001585 	.word	0x08001585
 8001578:	0800175d 	.word	0x0800175d
 800157c:	08001649 	.word	0x08001649
 8001580:	080016d3 	.word	0x080016d3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001584:	7c3b      	ldrb	r3, [r7, #16]
 8001586:	2b01      	cmp	r3, #1
 8001588:	f040 80f5 	bne.w	8001776 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800158c:	78bb      	ldrb	r3, [r7, #2]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d12d      	bne.n	80015ee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001592:	8b3b      	ldrh	r3, [r7, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	333d      	adds	r3, #61	; 0x3d
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	333d      	adds	r3, #61	; 0x3d
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10a      	bne.n	80015d8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	332a      	adds	r3, #42	; 0x2a
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80015d6:	e0ce      	b.n	8001776 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	332a      	adds	r3, #42	; 0x2a
 80015e8:	2202      	movs	r2, #2
 80015ea:	701a      	strb	r2, [r3, #0]
      break;
 80015ec:	e0c3      	b.n	8001776 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	331a      	adds	r3, #26
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	f040 80b8 	bne.w	8001776 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	333c      	adds	r3, #60	; 0x3c
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10a      	bne.n	8001632 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	332a      	adds	r3, #42	; 0x2a
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
      break;
 8001630:	e0a1      	b.n	8001776 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001632:	78fa      	ldrb	r2, [r7, #3]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	332a      	adds	r3, #42	; 0x2a
 8001642:	2202      	movs	r2, #2
 8001644:	701a      	strb	r2, [r3, #0]
      break;
 8001646:	e096      	b.n	8001776 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001648:	78bb      	ldrb	r3, [r7, #2]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d120      	bne.n	8001690 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800164e:	78fa      	ldrb	r2, [r7, #3]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	333d      	adds	r3, #61	; 0x3d
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10a      	bne.n	800167a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001664:	78fa      	ldrb	r2, [r7, #3]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	332a      	adds	r3, #42	; 0x2a
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001678:	e07e      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	332a      	adds	r3, #42	; 0x2a
 800168a:	2202      	movs	r2, #2
 800168c:	701a      	strb	r2, [r3, #0]
      break;
 800168e:	e073      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	333c      	adds	r3, #60	; 0x3c
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10a      	bne.n	80016bc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	332a      	adds	r3, #42	; 0x2a
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
      break;
 80016ba:	e05d      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	332a      	adds	r3, #42	; 0x2a
 80016cc:	2202      	movs	r2, #2
 80016ce:	701a      	strb	r2, [r3, #0]
      break;
 80016d0:	e052      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80016d2:	78bb      	ldrb	r3, [r7, #2]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d120      	bne.n	800171a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	333d      	adds	r3, #61	; 0x3d
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	332a      	adds	r3, #42	; 0x2a
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001702:	e039      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	332a      	adds	r3, #42	; 0x2a
 8001714:	2202      	movs	r2, #2
 8001716:	701a      	strb	r2, [r3, #0]
      break;
 8001718:	e02e      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	333c      	adds	r3, #60	; 0x3c
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10a      	bne.n	8001746 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	332a      	adds	r3, #42	; 0x2a
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
      break;
 8001744:	e018      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	332a      	adds	r3, #42	; 0x2a
 8001756:	2202      	movs	r2, #2
 8001758:	701a      	strb	r2, [r3, #0]
      break;
 800175a:	e00d      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	332a      	adds	r3, #42	; 0x2a
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
      break;
 8001770:	e002      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001772:	bf00      	nop
 8001774:	e000      	b.n	8001778 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001776:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	332c      	adds	r3, #44	; 0x2c
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	8b39      	ldrh	r1, [r7, #24]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4403      	add	r3, r0
 800179c:	3334      	adds	r3, #52	; 0x34
 800179e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	334c      	adds	r3, #76	; 0x4c
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3338      	adds	r3, #56	; 0x38
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3315      	adds	r3, #21
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	334d      	adds	r3, #77	; 0x4d
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	3310      	adds	r3, #16
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	1d19      	adds	r1, r3, #4
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	799b      	ldrb	r3, [r3, #6]
 800180a:	461a      	mov	r2, r3
 800180c:	f003 fba4 	bl	8004f58 <USB_HC_StartXfer>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop

0800181c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f003 f898 	bl	8004968 <USB_GetMode>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	f040 80fb 	bne.w	8001a36 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f003 f85b 	bl	8004900 <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80f1 	beq.w	8001a34 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 f852 	bl	8004900 <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001866:	d104      	bne.n	8001872 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001870:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f003 f842 	bl	8004900 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001886:	d104      	bne.n	8001892 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001890:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f832 	bl	8004900 <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018a6:	d104      	bne.n	80018b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 f822 	bl	8004900 <USB_ReadInterrupts>
 80018bc:	4603      	mov	r3, r0
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d103      	bne.n	80018ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2202      	movs	r2, #2
 80018cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 f814 	bl	8004900 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018e2:	d120      	bne.n	8001926 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d113      	bne.n	8001926 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80018fe:	2110      	movs	r1, #16
 8001900:	6938      	ldr	r0, [r7, #16]
 8001902:	f002 ff07 	bl	8004714 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001906:	6938      	ldr	r0, [r7, #16]
 8001908:	f002 ff36 	bl	8004778 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7a5b      	ldrb	r3, [r3, #9]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d105      	bne.n	8001920 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f928 	bl	8004b70 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f006 f8ff 	bl	8007b24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 ffe8 	bl	8004900 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800193a:	d102      	bne.n	8001942 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f001 fd33 	bl	80033a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 ffda 	bl	8004900 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b08      	cmp	r3, #8
 8001954:	d106      	bne.n	8001964 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f006 f8c8 	bl	8007aec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2208      	movs	r2, #8
 8001962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f002 ffc9 	bl	8004900 <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001978:	d139      	bne.n	80019ee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fd64 	bl	800544c <USB_HC_ReadInterrupt>
 8001984:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e025      	b.n	80019d8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d018      	beq.n	80019d2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b6:	d106      	bne.n	80019c6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f905 	bl	8001bce <HCD_HC_IN_IRQHandler>
 80019c4:	e005      	b.n	80019d2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 ff67 	bl	80028a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	795b      	ldrb	r3, [r3, #5]
 80019dc:	461a      	mov	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d3d3      	bcc.n	800198c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 ff84 	bl	8004900 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b10      	cmp	r3, #16
 8001a00:	d101      	bne.n	8001a06 <HAL_HCD_IRQHandler+0x1ea>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_HCD_IRQHandler+0x1ec>
 8001a06:	2300      	movs	r3, #0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d014      	beq.n	8001a36 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699a      	ldr	r2, [r3, #24]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0210 	bic.w	r2, r2, #16
 8001a1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f001 fbe4 	bl	80031ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0210 	orr.w	r2, r2, #16
 8001a30:	619a      	str	r2, [r3, #24]
 8001a32:	e000      	b.n	8001a36 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001a34:	bf00      	nop
    }
  }
}
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_HCD_Start+0x16>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e013      	b.n	8001a7a <HAL_HCD_Start+0x3e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 f8ec 	bl	8004c3e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fde4 	bl	8004638 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_HCD_Stop+0x16>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e00d      	b.n	8001ab4 <HAL_HCD_Stop+0x32>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fe3f 	bl	8005728 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 f88e 	bl	8004bea <USB_ResetPort>
 8001ace:	4603      	mov	r3, r0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	334c      	adds	r3, #76	; 0x4c
 8001af4:	781b      	ldrb	r3, [r3, #0]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3338      	adds	r3, #56	; 0x38
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 f8d0 	bl	8004cde <USB_GetCurrentFrame>
 8001b3e:	4603      	mov	r3, r0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 f8ab 	bl	8004cb0 <USB_GetHostSpeed>
 8001b5a:	4603      	mov	r3, r0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	331a      	adds	r3, #26
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	331b      	adds	r3, #27
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3325      	adds	r3, #37	; 0x25
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3324      	adds	r3, #36	; 0x24
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 fe9a 	bl	8004926 <USB_ReadChInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d11a      	bne.n	8001c32 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	334d      	adds	r3, #77	; 0x4d
 8001c1e:	2207      	movs	r2, #7
 8001c20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fc1f 	bl	800546e <USB_HC_Halt>
 8001c30:	e09e      	b.n	8001d70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fe73 	bl	8004926 <USB_ReadChInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c4a:	d11b      	bne.n	8001c84 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	334d      	adds	r3, #77	; 0x4d
 8001c70:	2208      	movs	r2, #8
 8001c72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fbf6 	bl	800546e <USB_HC_Halt>
 8001c82:	e075      	b.n	8001d70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fe4a 	bl	8004926 <USB_ReadChInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d11a      	bne.n	8001cd2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2308      	movs	r3, #8
 8001cac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	334d      	adds	r3, #77	; 0x4d
 8001cbe:	2206      	movs	r2, #6
 8001cc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fbcf 	bl	800546e <USB_HC_Halt>
 8001cd0:	e04e      	b.n	8001d70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fe23 	bl	8004926 <USB_ReadChInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cea:	d11b      	bne.n	8001d24 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	334d      	adds	r3, #77	; 0x4d
 8001d10:	2209      	movs	r2, #9
 8001d12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fba6 	bl	800546e <USB_HC_Halt>
 8001d22:	e025      	b.n	8001d70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 fdfa 	bl	8004926 <USB_ReadChInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d119      	bne.n	8001d70 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	334d      	adds	r3, #77	; 0x4d
 8001d5e:	2207      	movs	r2, #7
 8001d60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fb7f 	bl	800546e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fdd4 	bl	8004926 <USB_ReadChInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d88:	d112      	bne.n	8001db0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fb6b 	bl	800546e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	461a      	mov	r2, r3
 8001da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001daa:	6093      	str	r3, [r2, #8]
 8001dac:	f000 bd75 	b.w	800289a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fdb4 	bl	8004926 <USB_ReadChInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f040 8128 	bne.w	800201a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2320      	movs	r3, #32
 8001dda:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	331b      	adds	r3, #27
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d119      	bne.n	8001e26 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	331b      	adds	r3, #27
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	0151      	lsls	r1, r2, #5
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	440a      	add	r2, r1
 8001e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e24:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	799b      	ldrb	r3, [r3, #6]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01b      	beq.n	8001e66 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3330      	adds	r3, #48	; 0x30
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	1ac9      	subs	r1, r1, r3
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4403      	add	r3, r0
 8001e62:	3338      	adds	r3, #56	; 0x38
 8001e64:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	334d      	adds	r3, #77	; 0x4d
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	3344      	adds	r3, #68	; 0x44
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3326      	adds	r3, #38	; 0x26
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3326      	adds	r3, #38	; 0x26
 8001ec6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d110      	bne.n	8001eee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 faca 	bl	800546e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2310      	movs	r3, #16
 8001eea:	6093      	str	r3, [r2, #8]
 8001eec:	e03d      	b.n	8001f6a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3326      	adds	r3, #38	; 0x26
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d00a      	beq.n	8001f1a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	3326      	adds	r3, #38	; 0x26
 8001f14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d127      	bne.n	8001f6a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	0151      	lsls	r1, r2, #5
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	440a      	add	r2, r1
 8001f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f38:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	334c      	adds	r3, #76	; 0x4c
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	334c      	adds	r3, #76	; 0x4c
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f005 fdeb 	bl	8007b40 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	799b      	ldrb	r3, [r3, #6]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d13b      	bne.n	8001fea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	3338      	adds	r3, #56	; 0x38
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4403      	add	r3, r0
 8001f92:	3328      	adds	r3, #40	; 0x28
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	440b      	add	r3, r1
 8001f98:	1e59      	subs	r1, r3, #1
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4403      	add	r3, r0
 8001fa8:	3328      	adds	r3, #40	; 0x28
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8470 	beq.w	800289a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	333c      	adds	r3, #60	; 0x3c
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2d8      	uxtb	r0, r3
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	333c      	adds	r3, #60	; 0x3c
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	f000 bc58 	b.w	800289a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	333c      	adds	r3, #60	; 0x3c
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2d8      	uxtb	r0, r3
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	333c      	adds	r3, #60	; 0x3c
 8002012:	4602      	mov	r2, r0
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	f000 bc40 	b.w	800289a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f002 fc7f 	bl	8004926 <USB_ReadChInterrupts>
 8002028:	4603      	mov	r3, r0
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b20      	cmp	r3, #32
 8002030:	d131      	bne.n	8002096 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203e:	461a      	mov	r2, r3
 8002040:	2320      	movs	r3, #32
 8002042:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	331a      	adds	r3, #26
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	f040 841f 	bne.w	800289a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	331b      	adds	r3, #27
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	334d      	adds	r3, #77	; 0x4d
 8002080:	2203      	movs	r2, #3
 8002082:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f003 f9ee 	bl	800546e <USB_HC_Halt>
 8002092:	f000 bc02 	b.w	800289a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fc41 	bl	8004926 <USB_ReadChInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	f040 8305 	bne.w	80026ba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	461a      	mov	r2, r3
 80020be:	2302      	movs	r3, #2
 80020c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	334d      	adds	r3, #77	; 0x4d
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d114      	bne.n	8002102 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	334d      	adds	r3, #77	; 0x4d
 80020e8:	2202      	movs	r2, #2
 80020ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	334c      	adds	r3, #76	; 0x4c
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e2cc      	b.n	800269c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	334d      	adds	r3, #77	; 0x4d
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b06      	cmp	r3, #6
 8002116:	d114      	bne.n	8002142 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	334d      	adds	r3, #77	; 0x4d
 8002128:	2202      	movs	r2, #2
 800212a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	334c      	adds	r3, #76	; 0x4c
 800213c:	2205      	movs	r2, #5
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	e2ac      	b.n	800269c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	334d      	adds	r3, #77	; 0x4d
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b07      	cmp	r3, #7
 8002156:	d00b      	beq.n	8002170 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	334d      	adds	r3, #77	; 0x4d
 8002168:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800216a:	2b09      	cmp	r3, #9
 800216c:	f040 80a6 	bne.w	80022bc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	334d      	adds	r3, #77	; 0x4d
 8002180:	2202      	movs	r2, #2
 8002182:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3344      	adds	r3, #68	; 0x44
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4403      	add	r3, r0
 80021a4:	3344      	adds	r3, #68	; 0x44
 80021a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	3344      	adds	r3, #68	; 0x44
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d943      	bls.n	8002246 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	3344      	adds	r3, #68	; 0x44
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	331a      	adds	r3, #26
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d123      	bne.n	8002230 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	331b      	adds	r3, #27
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	331c      	adds	r3, #28
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	0151      	lsls	r1, r2, #5
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	440a      	add	r2, r1
 8002226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	334c      	adds	r3, #76	; 0x4c
 8002240:	2204      	movs	r2, #4
 8002242:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002244:	e229      	b.n	800269a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	334c      	adds	r3, #76	; 0x4c
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3326      	adds	r3, #38	; 0x26
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3326      	adds	r3, #38	; 0x26
 8002280:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002282:	2b02      	cmp	r3, #2
 8002284:	f040 8209 	bne.w	800269a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800229e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022ba:	e1ee      	b.n	800269a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	334d      	adds	r3, #77	; 0x4d
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	f040 80c8 	bne.w	8002464 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	334d      	adds	r3, #77	; 0x4d
 80022e4:	2202      	movs	r2, #2
 80022e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	331b      	adds	r3, #27
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	f040 81ce 	bne.w	800269c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3326      	adds	r3, #38	; 0x26
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d16b      	bne.n	80023ee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	3348      	adds	r3, #72	; 0x48
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1c59      	adds	r1, r3, #1
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4403      	add	r3, r0
 8002336:	3348      	adds	r3, #72	; 0x48
 8002338:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	3348      	adds	r3, #72	; 0x48
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d943      	bls.n	80023d8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3348      	adds	r3, #72	; 0x48
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	331b      	adds	r3, #27
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	3344      	adds	r3, #68	; 0x44
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d809      	bhi.n	80023a2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	331c      	adds	r3, #28
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	0151      	lsls	r1, r2, #5
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	440a      	add	r2, r1
 80023b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	334c      	adds	r3, #76	; 0x4c
 80023d2:	2204      	movs	r2, #4
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e014      	b.n	8002402 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	334c      	adds	r3, #76	; 0x4c
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e009      	b.n	8002402 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	334c      	adds	r3, #76	; 0x4c
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	3326      	adds	r3, #38	; 0x26
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3326      	adds	r3, #38	; 0x26
 8002428:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800242a:	2b02      	cmp	r3, #2
 800242c:	f040 8136 	bne.w	800269c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002446:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800244e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e11b      	b.n	800269c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	334d      	adds	r3, #77	; 0x4d
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b03      	cmp	r3, #3
 8002478:	f040 8081 	bne.w	800257e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	334d      	adds	r3, #77	; 0x4d
 800248c:	2202      	movs	r2, #2
 800248e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	331b      	adds	r3, #27
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	f040 80fa 	bne.w	800269c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	334c      	adds	r3, #76	; 0x4c
 80024b8:	2202      	movs	r2, #2
 80024ba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	0151      	lsls	r1, r2, #5
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	440a      	add	r2, r1
 80024d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024da:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	0151      	lsls	r1, r2, #5
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	440a      	add	r2, r1
 80024f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024fa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	0151      	lsls	r1, r2, #5
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	440a      	add	r2, r1
 8002512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002516:	f023 0320 	bic.w	r3, r3, #32
 800251a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3326      	adds	r3, #38	; 0x26
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	3326      	adds	r3, #38	; 0x26
 8002542:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002544:	2b02      	cmp	r3, #2
 8002546:	f040 80a9 	bne.w	800269c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002560:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002568:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e08e      	b.n	800269c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	334d      	adds	r3, #77	; 0x4d
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d143      	bne.n	800261c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	334d      	adds	r3, #77	; 0x4d
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	334c      	adds	r3, #76	; 0x4c
 80025b8:	2202      	movs	r2, #2
 80025ba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3326      	adds	r3, #38	; 0x26
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	3326      	adds	r3, #38	; 0x26
 80025e2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d159      	bne.n	800269c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002606:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e03f      	b.n	800269c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	334d      	adds	r3, #77	; 0x4d
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b08      	cmp	r3, #8
 8002630:	d126      	bne.n	8002680 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	334d      	adds	r3, #77	; 0x4d
 8002642:	2202      	movs	r2, #2
 8002644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	3344      	adds	r3, #68	; 0x44
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1c59      	adds	r1, r3, #1
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4403      	add	r3, r0
 8002666:	3344      	adds	r3, #68	; 0x44
 8002668:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	334c      	adds	r3, #76	; 0x4c
 800267a:	2204      	movs	r2, #4
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e00d      	b.n	800269c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	334d      	adds	r3, #77	; 0x4d
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b02      	cmp	r3, #2
 8002694:	f000 8100 	beq.w	8002898 <HCD_HC_IN_IRQHandler+0xcca>
 8002698:	e000      	b.n	800269c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800269a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	334c      	adds	r3, #76	; 0x4c
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f005 fa44 	bl	8007b40 <HAL_HCD_HC_NotifyURBChange_Callback>
 80026b8:	e0ef      	b.n	800289a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 f92f 	bl	8004926 <USB_ReadChInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d12f      	bne.n	8002732 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	461a      	mov	r2, r3
 80026e0:	2340      	movs	r3, #64	; 0x40
 80026e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	; 0x4d
 80026f4:	2205      	movs	r2, #5
 80026f6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	331a      	adds	r3, #26
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3344      	adds	r3, #68	; 0x44
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fe9f 	bl	800546e <USB_HC_Halt>
 8002730:	e0b3      	b.n	800289a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f002 f8f3 	bl	8004926 <USB_ReadChInterrupts>
 8002740:	4603      	mov	r3, r0
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b10      	cmp	r3, #16
 8002748:	f040 80a7 	bne.w	800289a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3326      	adds	r3, #38	; 0x26
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d11b      	bne.n	800279a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3344      	adds	r3, #68	; 0x44
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	334d      	adds	r3, #77	; 0x4d
 8002786:	2204      	movs	r2, #4
 8002788:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fe6b 	bl	800546e <USB_HC_Halt>
 8002798:	e03f      	b.n	800281a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3326      	adds	r3, #38	; 0x26
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3326      	adds	r3, #38	; 0x26
 80027c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d129      	bne.n	800281a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80027c6:	78fa      	ldrb	r2, [r7, #3]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3344      	adds	r3, #68	; 0x44
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	799b      	ldrb	r3, [r3, #6]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HCD_HC_IN_IRQHandler+0xc2a>
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	331b      	adds	r3, #27
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d110      	bne.n	800281a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	334d      	adds	r3, #77	; 0x4d
 8002808:	2204      	movs	r2, #4
 800280a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f002 fe2a 	bl	800546e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	331b      	adds	r3, #27
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d129      	bne.n	8002884 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	331b      	adds	r3, #27
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	0151      	lsls	r1, r2, #5
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	440a      	add	r2, r1
 800285a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002862:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	0151      	lsls	r1, r2, #5
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	440a      	add	r2, r1
 800287a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	2310      	movs	r3, #16
 8002894:	6093      	str	r3, [r2, #8]
 8002896:	e000      	b.n	800289a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002898:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 f831 	bl	8004926 <USB_ReadChInterrupts>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d11b      	bne.n	8002906 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	461a      	mov	r2, r3
 80028dc:	2304      	movs	r3, #4
 80028de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	334d      	adds	r3, #77	; 0x4d
 80028f0:	2207      	movs	r2, #7
 80028f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 fdb6 	bl	800546e <USB_HC_Halt>
 8002902:	f000 bc6f 	b.w	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f002 f809 	bl	8004926 <USB_ReadChInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b20      	cmp	r3, #32
 800291c:	f040 8082 	bne.w	8002a24 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2320      	movs	r3, #32
 8002930:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3319      	adds	r3, #25
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d124      	bne.n	8002992 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3319      	adds	r3, #25
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	334c      	adds	r3, #76	; 0x4c
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	334d      	adds	r3, #77	; 0x4d
 8002980:	2203      	movs	r2, #3
 8002982:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fd6e 	bl	800546e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	331a      	adds	r3, #26
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	f040 841d 	bne.w	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	331b      	adds	r3, #27
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 8411 	bne.w	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3326      	adds	r3, #38	; 0x26
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d009      	beq.n	80029ec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	331b      	adds	r3, #27
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	334d      	adds	r3, #77	; 0x4d
 80029fc:	2203      	movs	r2, #3
 80029fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fd30 	bl	800546e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3344      	adds	r3, #68	; 0x44
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e3df      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 ff7a 	bl	8004926 <USB_ReadChInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3c:	d111      	bne.n	8002a62 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fd07 	bl	800546e <USB_HC_Halt>
 8002a60:	e3c0      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 ff5b 	bl	8004926 <USB_ReadChInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d168      	bne.n	8002b4c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3344      	adds	r3, #68	; 0x44
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 ff45 	bl	8004926 <USB_ReadChInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b40      	cmp	r3, #64	; 0x40
 8002aa4:	d112      	bne.n	8002acc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3319      	adds	r3, #25
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2340      	movs	r3, #64	; 0x40
 8002aca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	331b      	adds	r3, #27
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d019      	beq.n	8002b16 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	331b      	adds	r3, #27
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	0151      	lsls	r1, r2, #5
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	440a      	add	r2, r1
 8002b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b14:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	461a      	mov	r2, r3
 8002b24:	2301      	movs	r3, #1
 8002b26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334d      	adds	r3, #77	; 0x4d
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 fc92 	bl	800546e <USB_HC_Halt>
 8002b4a:	e34b      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f001 fee6 	bl	8004926 <USB_ReadChInterrupts>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d139      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334d      	adds	r3, #77	; 0x4d
 8002b74:	2205      	movs	r2, #5
 8002b76:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	331a      	adds	r3, #26
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3319      	adds	r3, #25
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3344      	adds	r3, #68	; 0x44
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f002 fc55 	bl	800546e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2340      	movs	r3, #64	; 0x40
 8002bd4:	6093      	str	r3, [r2, #8]
 8002bd6:	e305      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 fea0 	bl	8004926 <USB_ReadChInterrupts>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d11a      	bne.n	8002c26 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2308      	movs	r3, #8
 8002c00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	334d      	adds	r3, #77	; 0x4d
 8002c12:	2206      	movs	r2, #6
 8002c14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 fc25 	bl	800546e <USB_HC_Halt>
 8002c24:	e2de      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 fe79 	bl	8004926 <USB_ReadChInterrupts>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b10      	cmp	r3, #16
 8002c3c:	d144      	bne.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3344      	adds	r3, #68	; 0x44
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	334d      	adds	r3, #77	; 0x4d
 8002c62:	2204      	movs	r2, #4
 8002c64:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3319      	adds	r3, #25
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d114      	bne.n	8002ca6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3318      	adds	r3, #24
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3319      	adds	r3, #25
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 fbdd 	bl	800546e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	6093      	str	r3, [r2, #8]
 8002cc6:	e28d      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 fe28 	bl	8004926 <USB_ReadChInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b80      	cmp	r3, #128	; 0x80
 8002cde:	d169      	bne.n	8002db4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	799b      	ldrb	r3, [r3, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d111      	bne.n	8002d0c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334d      	adds	r3, #77	; 0x4d
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 fbb2 	bl	800546e <USB_HC_Halt>
 8002d0a:	e049      	b.n	8002da0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3344      	adds	r3, #68	; 0x44
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1c59      	adds	r1, r3, #1
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4403      	add	r3, r0
 8002d2c:	3344      	adds	r3, #68	; 0x44
 8002d2e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3344      	adds	r3, #68	; 0x44
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d922      	bls.n	8002d8c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3344      	adds	r3, #68	; 0x44
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	334c      	adds	r3, #76	; 0x4c
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	334c      	adds	r3, #76	; 0x4c
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f004 fedb 	bl	8007b40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d8a:	e009      	b.n	8002da0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	334c      	adds	r3, #76	; 0x4c
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	6093      	str	r3, [r2, #8]
 8002db2:	e217      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fdb2 	bl	8004926 <USB_ReadChInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dcc:	d11b      	bne.n	8002e06 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	334d      	adds	r3, #77	; 0x4d
 8002dde:	2209      	movs	r2, #9
 8002de0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f002 fb3f 	bl	800546e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e02:	6093      	str	r3, [r2, #8]
 8002e04:	e1ee      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fd89 	bl	8004926 <USB_ReadChInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	f040 81df 	bne.w	80031de <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2302      	movs	r3, #2
 8002e30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	334d      	adds	r3, #77	; 0x4d
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	f040 8093 	bne.w	8002f70 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	334d      	adds	r3, #77	; 0x4d
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	334c      	adds	r3, #76	; 0x4c
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3326      	adds	r3, #38	; 0x26
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d00b      	beq.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3326      	adds	r3, #38	; 0x26
 8002e98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	f040 8190 	bne.w	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	799b      	ldrb	r3, [r3, #6]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d115      	bne.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	333d      	adds	r3, #61	; 0x3d
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2d8      	uxtb	r0, r3
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	333d      	adds	r3, #61	; 0x3d
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	799b      	ldrb	r3, [r3, #6]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	f040 8171 	bne.w	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	3334      	adds	r3, #52	; 0x34
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8165 	beq.w	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3334      	adds	r3, #52	; 0x34
 8002f06:	6819      	ldr	r1, [r3, #0]
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4403      	add	r3, r0
 8002f16:	3328      	adds	r3, #40	; 0x28
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	440b      	add	r3, r1
 8002f1c:	1e59      	subs	r1, r3, #1
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4403      	add	r3, r0
 8002f2c:	3328      	adds	r3, #40	; 0x28
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f34:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 813f 	beq.w	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	333d      	adds	r3, #61	; 0x3d
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2d8      	uxtb	r0, r3
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	333d      	adds	r3, #61	; 0x3d
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e127      	b.n	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	334d      	adds	r3, #77	; 0x4d
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d120      	bne.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	334d      	adds	r3, #77	; 0x4d
 8002f96:	2202      	movs	r2, #2
 8002f98:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	331b      	adds	r3, #27
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	f040 8107 	bne.w	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	334c      	adds	r3, #76	; 0x4c
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e0fb      	b.n	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	334d      	adds	r3, #77	; 0x4d
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d13a      	bne.n	8003054 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	334d      	adds	r3, #77	; 0x4d
 8002fee:	2202      	movs	r2, #2
 8002ff0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	334c      	adds	r3, #76	; 0x4c
 8003002:	2202      	movs	r2, #2
 8003004:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	331b      	adds	r3, #27
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	f040 80d1 	bne.w	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	331b      	adds	r3, #27
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	0151      	lsls	r1, r2, #5
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	440a      	add	r2, r1
 8003048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800304c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003050:	6053      	str	r3, [r2, #4]
 8003052:	e0b5      	b.n	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	334d      	adds	r3, #77	; 0x4d
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b05      	cmp	r3, #5
 8003068:	d114      	bne.n	8003094 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	334d      	adds	r3, #77	; 0x4d
 800307a:	2202      	movs	r2, #2
 800307c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	334c      	adds	r3, #76	; 0x4c
 800308e:	2202      	movs	r2, #2
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e095      	b.n	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	334d      	adds	r3, #77	; 0x4d
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d114      	bne.n	80030d4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334d      	adds	r3, #77	; 0x4d
 80030ba:	2202      	movs	r2, #2
 80030bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	334c      	adds	r3, #76	; 0x4c
 80030ce:	2205      	movs	r2, #5
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e075      	b.n	80031c0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	334d      	adds	r3, #77	; 0x4d
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b07      	cmp	r3, #7
 80030e8:	d00a      	beq.n	8003100 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334d      	adds	r3, #77	; 0x4d
 80030fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d170      	bne.n	80031e2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	334d      	adds	r3, #77	; 0x4d
 8003110:	2202      	movs	r2, #2
 8003112:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3344      	adds	r3, #68	; 0x44
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1c59      	adds	r1, r3, #1
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4403      	add	r3, r0
 8003134:	3344      	adds	r3, #68	; 0x44
 8003136:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3344      	adds	r3, #68	; 0x44
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d914      	bls.n	8003178 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3344      	adds	r3, #68	; 0x44
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334c      	adds	r3, #76	; 0x4c
 8003172:	2204      	movs	r2, #4
 8003174:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003176:	e022      	b.n	80031be <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	334c      	adds	r3, #76	; 0x4c
 8003188:	2202      	movs	r2, #2
 800318a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b8:	461a      	mov	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334c      	adds	r3, #76	; 0x4c
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f004 fcb2 	bl	8007b40 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031dc:	e002      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80031e2:	bf00      	nop
  }
}
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b08a      	sub	sp, #40	; 0x28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	0c5b      	lsrs	r3, r3, #17
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800321e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d004      	beq.n	8003230 <HCD_RXQLVL_IRQHandler+0x46>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b05      	cmp	r3, #5
 800322a:	f000 80b6 	beq.w	800339a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800322e:	e0b7      	b.n	80033a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80b3 	beq.w	800339e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	332c      	adds	r3, #44	; 0x2c
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80a7 	beq.w	800339e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3338      	adds	r3, #56	; 0x38
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	18d1      	adds	r1, r2, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4403      	add	r3, r0
 8003274:	3334      	adds	r3, #52	; 0x34
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4299      	cmp	r1, r3
 800327a:	f200 8083 	bhi.w	8003384 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	332c      	adds	r3, #44	; 0x2c
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	b292      	uxth	r2, r2
 8003298:	4619      	mov	r1, r3
 800329a:	f001 fad9 	bl	8004850 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	332c      	adds	r3, #44	; 0x2c
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	18d1      	adds	r1, r2, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4403      	add	r3, r0
 80032c2:	332c      	adds	r3, #44	; 0x2c
 80032c4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3338      	adds	r3, #56	; 0x38
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	18d1      	adds	r1, r2, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4403      	add	r3, r0
 80032ea:	3338      	adds	r3, #56	; 0x38
 80032ec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	0cdb      	lsrs	r3, r3, #19
 80032fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003302:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	3328      	adds	r3, #40	; 0x28
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4293      	cmp	r3, r2
 800331c:	d13f      	bne.n	800339e <HCD_RXQLVL_IRQHandler+0x1b4>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d03c      	beq.n	800339e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800333a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003342:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	461a      	mov	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	333c      	adds	r3, #60	; 0x3c
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f083 0301 	eor.w	r3, r3, #1
 800336c:	b2d8      	uxtb	r0, r3
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	333c      	adds	r3, #60	; 0x3c
 800337e:	4602      	mov	r2, r0
 8003380:	701a      	strb	r2, [r3, #0]
      break;
 8003382:	e00c      	b.n	800339e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334c      	adds	r3, #76	; 0x4c
 8003394:	2204      	movs	r2, #4
 8003396:	701a      	strb	r2, [r3, #0]
      break;
 8003398:	e001      	b.n	800339e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800339a:	bf00      	nop
 800339c:	e000      	b.n	80033a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800339e:	bf00      	nop
  }
}
 80033a0:	bf00      	nop
 80033a2:	3728      	adds	r7, #40	; 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d10b      	bne.n	80033f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f004 fb8c 	bl	8007b08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f043 0302 	orr.w	r3, r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d132      	bne.n	8003468 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d126      	bne.n	8003462 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	7a5b      	ldrb	r3, [r3, #9]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d113      	bne.n	8003444 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003426:	d106      	bne.n	8003436 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2102      	movs	r1, #2
 800342e:	4618      	mov	r0, r3
 8003430:	f001 fb9e 	bl	8004b70 <USB_InitFSLSPClkSel>
 8003434:	e011      	b.n	800345a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fb97 	bl	8004b70 <USB_InitFSLSPClkSel>
 8003442:	e00a      	b.n	800345a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	79db      	ldrb	r3, [r3, #7]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d106      	bne.n	800345a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003452:	461a      	mov	r2, r3
 8003454:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003458:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f004 fb7e 	bl	8007b5c <HAL_HCD_PortEnabled_Callback>
 8003460:	e002      	b.n	8003468 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f004 fb88 	bl	8007b78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	d103      	bne.n	800347a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f043 0320 	orr.w	r3, r3, #32
 8003478:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6013      	str	r3, [r2, #0]
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e12b      	b.n	80036fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fa2c 	bl	8000914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	; 0x24
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034f4:	f000 fd80 	bl	8003ff8 <HAL_RCC_GetPCLK1Freq>
 80034f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4a81      	ldr	r2, [pc, #516]	; (8003704 <HAL_I2C_Init+0x274>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d807      	bhi.n	8003514 <HAL_I2C_Init+0x84>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a80      	ldr	r2, [pc, #512]	; (8003708 <HAL_I2C_Init+0x278>)
 8003508:	4293      	cmp	r3, r2
 800350a:	bf94      	ite	ls
 800350c:	2301      	movls	r3, #1
 800350e:	2300      	movhi	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e006      	b.n	8003522 <HAL_I2C_Init+0x92>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a7d      	ldr	r2, [pc, #500]	; (800370c <HAL_I2C_Init+0x27c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	bf94      	ite	ls
 800351c:	2301      	movls	r3, #1
 800351e:	2300      	movhi	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0e7      	b.n	80036fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a78      	ldr	r2, [pc, #480]	; (8003710 <HAL_I2C_Init+0x280>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0c9b      	lsrs	r3, r3, #18
 8003534:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a6a      	ldr	r2, [pc, #424]	; (8003704 <HAL_I2C_Init+0x274>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d802      	bhi.n	8003564 <HAL_I2C_Init+0xd4>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3301      	adds	r3, #1
 8003562:	e009      	b.n	8003578 <HAL_I2C_Init+0xe8>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	4a69      	ldr	r2, [pc, #420]	; (8003714 <HAL_I2C_Init+0x284>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	3301      	adds	r3, #1
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	430b      	orrs	r3, r1
 800357e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800358a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	495c      	ldr	r1, [pc, #368]	; (8003704 <HAL_I2C_Init+0x274>)
 8003594:	428b      	cmp	r3, r1
 8003596:	d819      	bhi.n	80035cc <HAL_I2C_Init+0x13c>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1e59      	subs	r1, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035ac:	400b      	ands	r3, r1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_I2C_Init+0x138>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1e59      	subs	r1, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	e051      	b.n	800366c <HAL_I2C_Init+0x1dc>
 80035c8:	2304      	movs	r3, #4
 80035ca:	e04f      	b.n	800366c <HAL_I2C_Init+0x1dc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d111      	bne.n	80035f8 <HAL_I2C_Init+0x168>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e012      	b.n	800361e <HAL_I2C_Init+0x18e>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e58      	subs	r0, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	0099      	lsls	r1, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	fbb0 f3f3 	udiv	r3, r0, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Init+0x196>
 8003622:	2301      	movs	r3, #1
 8003624:	e022      	b.n	800366c <HAL_I2C_Init+0x1dc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10e      	bne.n	800364c <HAL_I2C_Init+0x1bc>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1e58      	subs	r0, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	440b      	add	r3, r1
 800363c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003640:	3301      	adds	r3, #1
 8003642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364a:	e00f      	b.n	800366c <HAL_I2C_Init+0x1dc>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1e58      	subs	r0, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	0099      	lsls	r1, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	6809      	ldr	r1, [r1, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800369a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6911      	ldr	r1, [r2, #16]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68d2      	ldr	r2, [r2, #12]
 80036a6:	4311      	orrs	r1, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	000186a0 	.word	0x000186a0
 8003708:	001e847f 	.word	0x001e847f
 800370c:	003d08ff 	.word	0x003d08ff
 8003710:	431bde83 	.word	0x431bde83
 8003714:	10624dd3 	.word	0x10624dd3

08003718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e267      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d075      	beq.n	8003822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003736:	4b88      	ldr	r3, [pc, #544]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d00c      	beq.n	800375c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003742:	4b85      	ldr	r3, [pc, #532]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	2b08      	cmp	r3, #8
 800374c:	d112      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374e:	4b82      	ldr	r3, [pc, #520]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375a:	d10b      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	4b7e      	ldr	r3, [pc, #504]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05b      	beq.n	8003820 <HAL_RCC_OscConfig+0x108>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d157      	bne.n	8003820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e242      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d106      	bne.n	800378c <HAL_RCC_OscConfig+0x74>
 800377e:	4b76      	ldr	r3, [pc, #472]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a75      	ldr	r2, [pc, #468]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e01d      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x98>
 8003796:	4b70      	ldr	r3, [pc, #448]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6f      	ldr	r2, [pc, #444]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800379c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b6d      	ldr	r3, [pc, #436]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a6c      	ldr	r2, [pc, #432]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e00b      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 80037b0:	4b69      	ldr	r3, [pc, #420]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a68      	ldr	r2, [pc, #416]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b66      	ldr	r3, [pc, #408]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a65      	ldr	r2, [pc, #404]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fd fa4c 	bl	8000c6c <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fd fa48 	bl	8000c6c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e207      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0xc0>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fd fa38 	bl	8000c6c <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003800:	f7fd fa34 	bl	8000c6c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1f3      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	4b51      	ldr	r3, [pc, #324]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0xe8>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d063      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382e:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	2b08      	cmp	r3, #8
 8003844:	d11c      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003846:	4b44      	ldr	r3, [pc, #272]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d116      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003852:	4b41      	ldr	r3, [pc, #260]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1c7      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4937      	ldr	r1, [pc, #220]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	e03a      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <HAL_RCC_OscConfig+0x244>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7fd f9ed 	bl	8000c6c <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003896:	f7fd f9e9 	bl	8000c6c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1a8      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b28      	ldr	r3, [pc, #160]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4925      	ldr	r1, [pc, #148]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_RCC_OscConfig+0x244>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fd f9cc 	bl	8000c6c <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d8:	f7fd f9c8 	bl	8000c6c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e187      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d036      	beq.n	8003970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <HAL_RCC_OscConfig+0x248>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fd f9ac 	bl	8000c6c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003918:	f7fd f9a8 	bl	8000c6c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e167      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_OscConfig+0x240>)
 800392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x200>
 8003936:	e01b      	b.n	8003970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_RCC_OscConfig+0x248>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fd f995 	bl	8000c6c <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	e00e      	b.n	8003964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003946:	f7fd f991 	bl	8000c6c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d907      	bls.n	8003964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e150      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
 8003958:	40023800 	.word	0x40023800
 800395c:	42470000 	.word	0x42470000
 8003960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	4b88      	ldr	r3, [pc, #544]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ea      	bne.n	8003946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8097 	beq.w	8003aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003982:	4b81      	ldr	r3, [pc, #516]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10f      	bne.n	80039ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b7d      	ldr	r3, [pc, #500]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a7c      	ldr	r2, [pc, #496]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b7a      	ldr	r3, [pc, #488]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	4b77      	ldr	r3, [pc, #476]	; (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ba:	4b74      	ldr	r3, [pc, #464]	; (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a73      	ldr	r2, [pc, #460]	; (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fd f951 	bl	8000c6c <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fd f94d 	bl	8000c6c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e10c      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCC_OscConfig+0x474>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x2ea>
 80039f4:	4b64      	ldr	r3, [pc, #400]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a63      	ldr	r2, [pc, #396]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	e01c      	b.n	8003a3c <HAL_RCC_OscConfig+0x324>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x30c>
 8003a0a:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a5e      	ldr	r2, [pc, #376]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	4b5c      	ldr	r3, [pc, #368]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	4a5b      	ldr	r2, [pc, #364]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6713      	str	r3, [r2, #112]	; 0x70
 8003a22:	e00b      	b.n	8003a3c <HAL_RCC_OscConfig+0x324>
 8003a24:	4b58      	ldr	r3, [pc, #352]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a57      	ldr	r2, [pc, #348]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	4b55      	ldr	r3, [pc, #340]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4a54      	ldr	r2, [pc, #336]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a36:	f023 0304 	bic.w	r3, r3, #4
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d015      	beq.n	8003a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a44:	f7fd f912 	bl	8000c6c <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4c:	f7fd f90e 	bl	8000c6c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e0cb      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a62:	4b49      	ldr	r3, [pc, #292]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ee      	beq.n	8003a4c <HAL_RCC_OscConfig+0x334>
 8003a6e:	e014      	b.n	8003a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7fd f8fc 	bl	8000c6c <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fd f8f8 	bl	8000c6c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0b5      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8e:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1ee      	bne.n	8003a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa0:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4a38      	ldr	r2, [pc, #224]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80a1 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ab6:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d05c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d141      	bne.n	8003b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCC_OscConfig+0x478>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fd f8cc 	bl	8000c6c <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd f8c8 	bl	8000c6c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e087      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	019b      	lsls	r3, r3, #6
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	491b      	ldr	r1, [pc, #108]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x478>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fd f8a1 	bl	8000c6c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fd f89d 	bl	8000c6c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e05c      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x416>
 8003b4c:	e054      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HAL_RCC_OscConfig+0x478>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fd f88a 	bl	8000c6c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fd f886 	bl	8000c6c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e045      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_OscConfig+0x470>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x444>
 8003b7a:	e03d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e038      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x4ec>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d028      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d121      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d11a      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0cc      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b68      	ldr	r3, [pc, #416]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90c      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b63      	ldr	r3, [pc, #396]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0b8      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c5c:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a52      	ldr	r2, [pc, #328]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b50      	ldr	r3, [pc, #320]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	494d      	ldr	r1, [pc, #308]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d044      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d119      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e07f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e06f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e067      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce6:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4934      	ldr	r1, [pc, #208]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf8:	f7fc ffb8 	bl	8000c6c <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fc ffb4 	bl	8000c6c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e04f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 020c 	and.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1eb      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d20c      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e032      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4916      	ldr	r1, [pc, #88]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d8e:	f000 f821 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	490a      	ldr	r1, [pc, #40]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc ff18 	bl	8000be4 <HAL_InitTick>

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023c00 	.word	0x40023c00
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08008234 	.word	0x08008234
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	20000010 	.word	0x20000010

08003dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd8:	b094      	sub	sp, #80	; 0x50
 8003dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	647b      	str	r3, [r7, #68]	; 0x44
 8003de0:	2300      	movs	r3, #0
 8003de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de4:	2300      	movs	r3, #0
 8003de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dec:	4b79      	ldr	r3, [pc, #484]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d00d      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x40>
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	f200 80e1 	bhi.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x34>
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e06:	e0db      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b73      	ldr	r3, [pc, #460]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e0c:	e0db      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e0e:	4b73      	ldr	r3, [pc, #460]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8003e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e12:	e0d8      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e14:	4b6f      	ldr	r3, [pc, #444]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1e:	4b6d      	ldr	r3, [pc, #436]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d063      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2a:	4b6a      	ldr	r3, [pc, #424]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	099b      	lsrs	r3, r3, #6
 8003e30:	2200      	movs	r2, #0
 8003e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3e:	2300      	movs	r3, #0
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
 8003e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e46:	4622      	mov	r2, r4
 8003e48:	462b      	mov	r3, r5
 8003e4a:	f04f 0000 	mov.w	r0, #0
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	0159      	lsls	r1, r3, #5
 8003e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e58:	0150      	lsls	r0, r2, #5
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4621      	mov	r1, r4
 8003e60:	1a51      	subs	r1, r2, r1
 8003e62:	6139      	str	r1, [r7, #16]
 8003e64:	4629      	mov	r1, r5
 8003e66:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e78:	4659      	mov	r1, fp
 8003e7a:	018b      	lsls	r3, r1, #6
 8003e7c:	4651      	mov	r1, sl
 8003e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e82:	4651      	mov	r1, sl
 8003e84:	018a      	lsls	r2, r1, #6
 8003e86:	4651      	mov	r1, sl
 8003e88:	ebb2 0801 	subs.w	r8, r2, r1
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea6:	4690      	mov	r8, r2
 8003ea8:	4699      	mov	r9, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	eb18 0303 	adds.w	r3, r8, r3
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	462b      	mov	r3, r5
 8003eb4:	eb49 0303 	adc.w	r3, r9, r3
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	024b      	lsls	r3, r1, #9
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	024a      	lsls	r2, r1, #9
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eda:	2200      	movs	r2, #0
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ee4:	f7fc f970 	bl	80001c8 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4613      	mov	r3, r2
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef0:	e058      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef2:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	099b      	lsrs	r3, r3, #6
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	4611      	mov	r1, r2
 8003efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	2300      	movs	r3, #0
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	f04f 0000 	mov.w	r0, #0
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	0159      	lsls	r1, r3, #5
 8003f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f1e:	0150      	lsls	r0, r2, #5
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4641      	mov	r1, r8
 8003f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f44:	ebb2 040a 	subs.w	r4, r2, sl
 8003f48:	eb63 050b 	sbc.w	r5, r3, fp
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	00eb      	lsls	r3, r5, #3
 8003f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5a:	00e2      	lsls	r2, r4, #3
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	4643      	mov	r3, r8
 8003f62:	18e3      	adds	r3, r4, r3
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	464b      	mov	r3, r9
 8003f68:	eb45 0303 	adc.w	r3, r5, r3
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	028b      	lsls	r3, r1, #10
 8003f7e:	4621      	mov	r1, r4
 8003f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f84:	4621      	mov	r1, r4
 8003f86:	028a      	lsls	r2, r1, #10
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	61fa      	str	r2, [r7, #28]
 8003f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f98:	f7fc f916 	bl	80001c8 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3750      	adds	r7, #80	; 0x50
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	007a1200 	.word	0x007a1200

08003fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	2000000c 	.word	0x2000000c

08003ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ffc:	f7ff fff0 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0a9b      	lsrs	r3, r3, #10
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4903      	ldr	r1, [pc, #12]	; (800401c <HAL_RCC_GetPCLK1Freq+0x24>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	08008244 	.word	0x08008244

08004020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07b      	b.n	800412a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d108      	bne.n	800404c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004042:	d009      	beq.n	8004058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	61da      	str	r2, [r3, #28]
 800404a:	e005      	b.n	8004058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fc fc96 	bl	80009a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	ea42 0103 	orr.w	r1, r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f003 0104 	and.w	r1, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	f003 0210 	and.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004118:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b088      	sub	sp, #32
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4613      	mov	r3, r2
 8004140:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_SPI_Transmit+0x22>
 8004150:	2302      	movs	r3, #2
 8004152:	e12d      	b.n	80043b0 <HAL_SPI_Transmit+0x27e>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800415c:	f7fc fd86 	bl	8000c6c <HAL_GetTick>
 8004160:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d002      	beq.n	8004178 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004176:	e116      	b.n	80043a6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_SPI_Transmit+0x52>
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004188:	e10d      	b.n	80043a6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2203      	movs	r2, #3
 800418e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	88fa      	ldrh	r2, [r7, #6]
 80041a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d0:	d10f      	bne.n	80041f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d007      	beq.n	8004210 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004218:	d14f      	bne.n	80042ba <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_SPI_Transmit+0xf6>
 8004222:	8afb      	ldrh	r3, [r7, #22]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d142      	bne.n	80042ae <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	1c9a      	adds	r2, r3, #2
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800424c:	e02f      	b.n	80042ae <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b02      	cmp	r3, #2
 800425a:	d112      	bne.n	8004282 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	881a      	ldrh	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	1c9a      	adds	r2, r3, #2
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004280:	e015      	b.n	80042ae <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004282:	f7fc fcf3 	bl	8000c6c <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d803      	bhi.n	800429a <HAL_SPI_Transmit+0x168>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d102      	bne.n	80042a0 <HAL_SPI_Transmit+0x16e>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042ac:	e07b      	b.n	80043a6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1ca      	bne.n	800424e <HAL_SPI_Transmit+0x11c>
 80042b8:	e050      	b.n	800435c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_SPI_Transmit+0x196>
 80042c2:	8afb      	ldrh	r3, [r7, #22]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d144      	bne.n	8004352 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	7812      	ldrb	r2, [r2, #0]
 80042d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042ee:	e030      	b.n	8004352 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d113      	bne.n	8004326 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	86da      	strh	r2, [r3, #54]	; 0x36
 8004324:	e015      	b.n	8004352 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004326:	f7fc fca1 	bl	8000c6c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d803      	bhi.n	800433e <HAL_SPI_Transmit+0x20c>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d102      	bne.n	8004344 <HAL_SPI_Transmit+0x212>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004350:	e029      	b.n	80043a6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1c9      	bne.n	80042f0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f8b1 	bl	80044c8 <SPI_EndRxTxTransaction>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e003      	b.n	80043a6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043c8:	f7fc fc50 	bl	8000c6c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	4413      	add	r3, r2
 80043d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043d8:	f7fc fc48 	bl	8000c6c <HAL_GetTick>
 80043dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043de:	4b39      	ldr	r3, [pc, #228]	; (80044c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	015b      	lsls	r3, r3, #5
 80043e4:	0d1b      	lsrs	r3, r3, #20
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	fb02 f303 	mul.w	r3, r2, r3
 80043ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ee:	e054      	b.n	800449a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d050      	beq.n	800449a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043f8:	f7fc fc38 	bl	8000c6c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	429a      	cmp	r2, r3
 8004406:	d902      	bls.n	800440e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d13d      	bne.n	800448a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800441c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004426:	d111      	bne.n	800444c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004430:	d004      	beq.n	800443c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443a:	d107      	bne.n	800444c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004454:	d10f      	bne.n	8004476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e017      	b.n	80044ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3b01      	subs	r3, #1
 8004498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4013      	ands	r3, r2
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	bf0c      	ite	eq
 80044aa:	2301      	moveq	r3, #1
 80044ac:	2300      	movne	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d19b      	bne.n	80043f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	2000000c 	.word	0x2000000c

080044c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2201      	movs	r2, #1
 80044dc:	2102      	movs	r1, #2
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff ff6a 	bl	80043b8 <SPI_WaitFlagStateUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e032      	b.n	8004560 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044fa:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <SPI_EndRxTxTransaction+0xa0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1b      	ldr	r2, [pc, #108]	; (800456c <SPI_EndRxTxTransaction+0xa4>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	0d5b      	lsrs	r3, r3, #21
 8004506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004518:	d112      	bne.n	8004540 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2200      	movs	r2, #0
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff ff47 	bl	80043b8 <SPI_WaitFlagStateUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e00f      	b.n	8004560 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	3b01      	subs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	2b80      	cmp	r3, #128	; 0x80
 8004558:	d0f2      	beq.n	8004540 <SPI_EndRxTxTransaction+0x78>
 800455a:	e000      	b.n	800455e <SPI_EndRxTxTransaction+0x96>
        break;
 800455c:	bf00      	nop
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	2000000c 	.word	0x2000000c
 800456c:	165e9f81 	.word	0x165e9f81

08004570 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004570:	b084      	sub	sp, #16
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	f107 001c 	add.w	r0, r7, #28
 800457e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004582:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004586:	2b01      	cmp	r3, #1
 8004588:	d123      	bne.n	80045d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800459e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d105      	bne.n	80045c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f9dc 	bl	8004984 <USB_CoreReset>
 80045cc:	4603      	mov	r3, r0
 80045ce:	73fb      	strb	r3, [r7, #15]
 80045d0:	e01b      	b.n	800460a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f9d0 	bl	8004984 <USB_CoreReset>
 80045e4:	4603      	mov	r3, r0
 80045e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
 80045fc:	e005      	b.n	800460a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800460a:	7fbb      	ldrb	r3, [r7, #30]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10b      	bne.n	8004628 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f043 0206 	orr.w	r2, r3, #6
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004634:	b004      	add	sp, #16
 8004636:	4770      	bx	lr

08004638 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 0201 	bic.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d115      	bne.n	80046ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80046aa:	200a      	movs	r0, #10
 80046ac:	f7fc faea 	bl	8000c84 <HAL_Delay>
      ms += 10U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	330a      	adds	r3, #10
 80046b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f956 	bl	8004968 <USB_GetMode>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d01e      	beq.n	8004700 <USB_SetCurrentMode+0x84>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2bc7      	cmp	r3, #199	; 0xc7
 80046c6:	d9f0      	bls.n	80046aa <USB_SetCurrentMode+0x2e>
 80046c8:	e01a      	b.n	8004700 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d115      	bne.n	80046fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80046dc:	200a      	movs	r0, #10
 80046de:	f7fc fad1 	bl	8000c84 <HAL_Delay>
      ms += 10U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	330a      	adds	r3, #10
 80046e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f93d 	bl	8004968 <USB_GetMode>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <USB_SetCurrentMode+0x84>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2bc7      	cmp	r3, #199	; 0xc7
 80046f8:	d9f0      	bls.n	80046dc <USB_SetCurrentMode+0x60>
 80046fa:	e001      	b.n	8004700 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e005      	b.n	800470c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2bc8      	cmp	r3, #200	; 0xc8
 8004704:	d101      	bne.n	800470a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3301      	adds	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800472e:	d901      	bls.n	8004734 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e01b      	b.n	800476c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	daf2      	bge.n	8004722 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	019b      	lsls	r3, r3, #6
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004758:	d901      	bls.n	800475e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e006      	b.n	800476c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	d0f0      	beq.n	800474c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3301      	adds	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004790:	d901      	bls.n	8004796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e018      	b.n	80047c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	daf2      	bge.n	8004784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2210      	movs	r2, #16
 80047a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80047b4:	d901      	bls.n	80047ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e006      	b.n	80047c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d0f0      	beq.n	80047a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4611      	mov	r1, r2
 80047e0:	461a      	mov	r2, r3
 80047e2:	460b      	mov	r3, r1
 80047e4:	71fb      	strb	r3, [r7, #7]
 80047e6:	4613      	mov	r3, r2
 80047e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d123      	bne.n	8004842 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047fa:	88bb      	ldrh	r3, [r7, #4]
 80047fc:	3303      	adds	r3, #3
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e018      	b.n	800483a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	031a      	lsls	r2, r3, #12
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4413      	add	r3, r2
 8004810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004814:	461a      	mov	r2, r3
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3301      	adds	r3, #1
 8004832:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	3301      	adds	r3, #1
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3e2      	bcc.n	8004808 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3724      	adds	r7, #36	; 0x24
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004850:	b480      	push	{r7}
 8004852:	b08b      	sub	sp, #44	; 0x2c
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	b29b      	uxth	r3, r3
 800486c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	e014      	b.n	80048a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	601a      	str	r2, [r3, #0]
    pDest++;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	3301      	adds	r3, #1
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	3301      	adds	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	3301      	adds	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	3301      	adds	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	3301      	adds	r3, #1
 80048a4:	623b      	str	r3, [r7, #32]
 80048a6:	6a3a      	ldr	r2, [r7, #32]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3e6      	bcc.n	800487c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048ae:	8bfb      	ldrh	r3, [r7, #30]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01e      	beq.n	80048f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048be:	461a      	mov	r2, r3
 80048c0:	f107 0310 	add.w	r3, r7, #16
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	701a      	strb	r2, [r3, #0]
      i++;
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	3301      	adds	r3, #1
 80048de:	623b      	str	r3, [r7, #32]
      pDest++;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	3301      	adds	r3, #1
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048e6:	8bfb      	ldrh	r3, [r7, #30]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048ec:	8bfb      	ldrh	r3, [r7, #30]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ea      	bne.n	80048c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	372c      	adds	r7, #44	; 0x2c
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004918:	68fb      	ldr	r3, [r7, #12]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	4013      	ands	r3, r2
 8004958:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800495a:	68bb      	ldr	r3, [r7, #8]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0301 	and.w	r3, r3, #1
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800499c:	d901      	bls.n	80049a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e01b      	b.n	80049da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	daf2      	bge.n	8004990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3301      	adds	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80049c6:	d901      	bls.n	80049cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e006      	b.n	80049da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d0f0      	beq.n	80049ba <USB_CoreReset+0x36>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049e8:	b084      	sub	sp, #16
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d119      	bne.n	8004a72 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d10a      	bne.n	8004a5c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a54:	f043 0304 	orr.w	r3, r3, #4
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e014      	b.n	8004a86 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a6a:	f023 0304 	bic.w	r3, r3, #4
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e009      	b.n	8004a86 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a80:	f023 0304 	bic.w	r3, r3, #4
 8004a84:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a86:	2110      	movs	r1, #16
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff fe43 	bl	8004714 <USB_FlushTxFifo>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff fe6d 	bl	8004778 <USB_FlushRxFifo>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	e015      	b.n	8004ada <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	461a      	mov	r2, r3
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004ade:	461a      	mov	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d3e3      	bcc.n	8004aae <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f04f 32ff 	mov.w	r2, #4294967295
 8004af2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <USB_HostInit+0x170>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d10b      	bne.n	8004b14 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b02:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <USB_HostInit+0x174>)
 8004b08:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <USB_HostInit+0x178>)
 8004b0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b12:	e009      	b.n	8004b28 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2280      	movs	r2, #128	; 0x80
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a11      	ldr	r2, [pc, #68]	; (8004b64 <USB_HostInit+0x17c>)
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <USB_HostInit+0x180>)
 8004b24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f043 0210 	orr.w	r2, r3, #16
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <USB_HostInit+0x184>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b54:	b004      	add	sp, #16
 8004b56:	4770      	bx	lr
 8004b58:	40040000 	.word	0x40040000
 8004b5c:	01000200 	.word	0x01000200
 8004b60:	00e00300 	.word	0x00e00300
 8004b64:	00600080 	.word	0x00600080
 8004b68:	004000e0 	.word	0x004000e0
 8004b6c:	a3200008 	.word	0xa3200008

08004b70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b8e:	f023 0303 	bic.w	r3, r3, #3
 8004b92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bbe:	6053      	str	r3, [r2, #4]
 8004bc0:	e00c      	b.n	8004bdc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d107      	bne.n	8004bd8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f241 7370 	movw	r3, #6000	; 0x1770
 8004bd4:	6053      	str	r3, [r2, #4]
 8004bd6:	e001      	b.n	8004bdc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c0a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c18:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c1a:	2064      	movs	r0, #100	; 0x64
 8004c1c:	f7fc f832 	bl	8000c84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c2e:	200a      	movs	r0, #10
 8004c30:	f7fc f828 	bl	8000c84 <HAL_Delay>

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c62:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <USB_DriveVbus+0x44>
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d106      	bne.n	8004c82 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c80:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8c:	d109      	bne.n	8004ca2 <USB_DriveVbus+0x64>
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ca0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	0c5b      	lsrs	r3, r3, #17
 8004cce:	f003 0303 	and.w	r3, r3, #3
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	b29b      	uxth	r3, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	4608      	mov	r0, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4603      	mov	r3, r0
 8004d10:	70fb      	strb	r3, [r7, #3]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70bb      	strb	r3, [r7, #2]
 8004d16:	4613      	mov	r3, r2
 8004d18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f04f 33ff 	mov.w	r3, #4294967295
 8004d34:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d87c      	bhi.n	8004e38 <USB_HC_Init+0x138>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <USB_HC_Init+0x44>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004dfb 	.word	0x08004dfb
 8004d4c:	08004d55 	.word	0x08004d55
 8004d50:	08004dbd 	.word	0x08004dbd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d60:	461a      	mov	r2, r3
 8004d62:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	da10      	bge.n	8004d92 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004d90:	e055      	b.n	8004e3e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a6f      	ldr	r2, [pc, #444]	; (8004f54 <USB_HC_Init+0x254>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d151      	bne.n	8004e3e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	0151      	lsls	r1, r2, #5
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	440a      	add	r2, r1
 8004db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004db8:	60d3      	str	r3, [r2, #12]
      break;
 8004dba:	e040      	b.n	8004e3e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f240 639d 	movw	r3, #1693	; 0x69d
 8004dce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004dd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	da34      	bge.n	8004e42 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004df8:	e023      	b.n	8004e42 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	461a      	mov	r2, r3
 8004e08:	f240 2325 	movw	r3, #549	; 0x225
 8004e0c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da17      	bge.n	8004e46 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e30:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e34:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e36:	e006      	b.n	8004e46 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	77fb      	strb	r3, [r7, #31]
      break;
 8004e3c:	e004      	b.n	8004e48 <USB_HC_Init+0x148>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <USB_HC_Init+0x148>
      break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <USB_HC_Init+0x148>
      break;
 8004e46:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e54:	461a      	mov	r2, r3
 8004e56:	2300      	movs	r3, #0
 8004e58:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e74:	f043 0302 	orr.w	r3, r3, #2
 8004e78:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	2101      	movs	r1, #1
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	6939      	ldr	r1, [r7, #16]
 8004e90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e94:	4313      	orrs	r3, r2
 8004e96:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ea4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da03      	bge.n	8004eb4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	e001      	b.n	8004eb8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fef9 	bl	8004cb0 <USB_GetHostSpeed>
 8004ebe:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004ec0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d106      	bne.n	8004ed6 <USB_HC_Init+0x1d6>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d003      	beq.n	8004ed6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e001      	b.n	8004eda <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eda:	787b      	ldrb	r3, [r7, #1]
 8004edc:	059b      	lsls	r3, r3, #22
 8004ede:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ee2:	78bb      	ldrb	r3, [r7, #2]
 8004ee4:	02db      	lsls	r3, r3, #11
 8004ee6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eea:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004eec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ef0:	049b      	lsls	r3, r3, #18
 8004ef2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ef6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8004ef8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004efe:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f18:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d003      	beq.n	8004f2a <USB_HC_Init+0x22a>
 8004f22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10f      	bne.n	8004f4a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f48:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40040000 	.word	0x40040000

08004f58 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08c      	sub	sp, #48	; 0x30
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f74:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a5d      	ldr	r2, [pc, #372]	; (80050f0 <USB_HC_StartXfer+0x198>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d12f      	bne.n	8004fde <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d11c      	bne.n	8004fbe <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	7c9b      	ldrb	r3, [r3, #18]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <USB_HC_StartXfer+0x3c>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	7c9b      	ldrb	r3, [r3, #18]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d124      	bne.n	8004fde <USB_HC_StartXfer+0x86>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	799b      	ldrb	r3, [r3, #6]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d120      	bne.n	8004fde <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	6a3a      	ldr	r2, [r7, #32]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60d3      	str	r3, [r2, #12]
 8004fbc:	e00f      	b.n	8004fde <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	791b      	ldrb	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10b      	bne.n	8004fde <USB_HC_StartXfer+0x86>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	795b      	ldrb	r3, [r3, #5]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fb6b 	bl	80056b0 <USB_DoPing>
        return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e232      	b.n	8005444 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	799b      	ldrb	r3, [r3, #6]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d158      	bne.n	8005098 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	78db      	ldrb	r3, [r3, #3]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d007      	beq.n	8005002 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ff2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	8a92      	ldrh	r2, [r2, #20]
 8004ff8:	fb03 f202 	mul.w	r2, r3, r2
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	61da      	str	r2, [r3, #28]
 8005000:	e07c      	b.n	80050fc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	7c9b      	ldrb	r3, [r3, #18]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d130      	bne.n	800506c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	2bbc      	cmp	r3, #188	; 0xbc
 8005010:	d918      	bls.n	8005044 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	8a9b      	ldrh	r3, [r3, #20]
 8005016:	461a      	mov	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d003      	beq.n	8005034 <USB_HC_StartXfer+0xdc>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d103      	bne.n	800503c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2202      	movs	r2, #2
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	e05f      	b.n	80050fc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2201      	movs	r2, #1
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	e05b      	b.n	80050fc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d007      	beq.n	8005064 <USB_HC_StartXfer+0x10c>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d003      	beq.n	8005064 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2204      	movs	r2, #4
 8005060:	60da      	str	r2, [r3, #12]
 8005062:	e04b      	b.n	80050fc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2203      	movs	r2, #3
 8005068:	60da      	str	r2, [r3, #12]
 800506a:	e047      	b.n	80050fc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d10d      	bne.n	800508e <USB_HC_StartXfer+0x136>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	8a92      	ldrh	r2, [r2, #20]
 800507a:	4293      	cmp	r3, r2
 800507c:	d907      	bls.n	800508e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800507e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	8a92      	ldrh	r2, [r2, #20]
 8005084:	fb03 f202 	mul.w	r2, r3, r2
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	61da      	str	r2, [r3, #28]
 800508c:	e036      	b.n	80050fc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6a1a      	ldr	r2, [r3, #32]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	61da      	str	r2, [r3, #28]
 8005096:	e031      	b.n	80050fc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d018      	beq.n	80050d2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	8a92      	ldrh	r2, [r2, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	3b01      	subs	r3, #1
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	8a92      	ldrh	r2, [r2, #20]
 80050b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050b4:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80050b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050b8:	8b7b      	ldrh	r3, [r7, #26]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d90b      	bls.n	80050d6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80050be:	8b7b      	ldrh	r3, [r7, #26]
 80050c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	8a92      	ldrh	r2, [r2, #20]
 80050c8:	fb03 f202 	mul.w	r2, r3, r2
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	61da      	str	r2, [r3, #28]
 80050d0:	e001      	b.n	80050d6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80050d2:	2301      	movs	r3, #1
 80050d4:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	78db      	ldrb	r3, [r3, #3]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	8a92      	ldrh	r2, [r2, #20]
 80050e4:	fb03 f202 	mul.w	r2, r3, r2
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	61da      	str	r2, [r3, #28]
 80050ec:	e006      	b.n	80050fc <USB_HC_StartXfer+0x1a4>
 80050ee:	bf00      	nop
 80050f0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005106:	04d9      	lsls	r1, r3, #19
 8005108:	4ba3      	ldr	r3, [pc, #652]	; (8005398 <USB_HC_StartXfer+0x440>)
 800510a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800510c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	7d9b      	ldrb	r3, [r3, #22]
 8005112:	075b      	lsls	r3, r3, #29
 8005114:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005118:	69f9      	ldr	r1, [r7, #28]
 800511a:	0148      	lsls	r0, r1, #5
 800511c:	6a39      	ldr	r1, [r7, #32]
 800511e:	4401      	add	r1, r0
 8005120:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005124:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005126:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	4413      	add	r3, r2
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	460a      	mov	r2, r1
 8005140:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	bf0c      	ite	eq
 8005152:	2301      	moveq	r3, #1
 8005154:	2300      	movne	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	4413      	add	r3, r2
 8005162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	6a3a      	ldr	r2, [r7, #32]
 800516e:	440a      	add	r2, r1
 8005170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005174:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005178:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	7e7b      	ldrb	r3, [r7, #25]
 800518a:	075b      	lsls	r3, r3, #29
 800518c:	69f9      	ldr	r1, [r7, #28]
 800518e:	0148      	lsls	r0, r1, #5
 8005190:	6a39      	ldr	r1, [r7, #32]
 8005192:	4401      	add	r1, r0
 8005194:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005198:	4313      	orrs	r3, r2
 800519a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	799b      	ldrb	r3, [r3, #6]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f040 80c3 	bne.w	800532c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	7c5b      	ldrb	r3, [r3, #17]
 80051aa:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80051b0:	4313      	orrs	r3, r2
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	6a3a      	ldr	r2, [r7, #32]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80051be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80051c2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	6a3a      	ldr	r2, [r7, #32]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	79db      	ldrb	r3, [r3, #7]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d123      	bne.n	8005234 <USB_HC_StartXfer+0x2dc>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	78db      	ldrb	r3, [r3, #3]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11f      	bne.n	8005234 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	6a3a      	ldr	r2, [r7, #32]
 8005208:	440a      	add	r2, r1
 800520a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005212:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	6a3a      	ldr	r2, [r7, #32]
 8005228:	440a      	add	r2, r1
 800522a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005232:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	7c9b      	ldrb	r3, [r3, #18]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d003      	beq.n	8005244 <USB_HC_StartXfer+0x2ec>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	7c9b      	ldrb	r3, [r3, #18]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d117      	bne.n	8005274 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005248:	2b01      	cmp	r3, #1
 800524a:	d113      	bne.n	8005274 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	78db      	ldrb	r3, [r3, #3]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d10f      	bne.n	8005274 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	6a3a      	ldr	r2, [r7, #32]
 8005268:	440a      	add	r2, r1
 800526a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800526e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005272:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	7c9b      	ldrb	r3, [r3, #18]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d162      	bne.n	8005342 <USB_HC_StartXfer+0x3ea>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d15e      	bne.n	8005342 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	3b01      	subs	r3, #1
 800528a:	2b03      	cmp	r3, #3
 800528c:	d858      	bhi.n	8005340 <USB_HC_StartXfer+0x3e8>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <USB_HC_StartXfer+0x33c>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052c7 	.word	0x080052c7
 800529c:	080052e9 	.word	0x080052e9
 80052a0:	0800530b 	.word	0x0800530b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	6a3a      	ldr	r2, [r7, #32]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c2:	6053      	str	r3, [r2, #4]
          break;
 80052c4:	e03d      	b.n	8005342 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	6a3a      	ldr	r2, [r7, #32]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e0:	f043 030e 	orr.w	r3, r3, #14
 80052e4:	6053      	str	r3, [r2, #4]
          break;
 80052e6:	e02c      	b.n	8005342 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	6a3a      	ldr	r2, [r7, #32]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005306:	6053      	str	r3, [r2, #4]
          break;
 8005308:	e01b      	b.n	8005342 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	440a      	add	r2, r1
 8005320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005328:	6053      	str	r3, [r2, #4]
          break;
 800532a:	e00a      	b.n	8005342 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005338:	461a      	mov	r2, r3
 800533a:	2300      	movs	r3, #0
 800533c:	6053      	str	r3, [r2, #4]
 800533e:	e000      	b.n	8005342 <USB_HC_StartXfer+0x3ea>
          break;
 8005340:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005358:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	78db      	ldrb	r3, [r3, #3]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e003      	b.n	8005374 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005372:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800537a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005388:	461a      	mov	r2, r3
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e055      	b.n	8005444 <USB_HC_StartXfer+0x4ec>
 8005398:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	78db      	ldrb	r3, [r3, #3]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d14e      	bne.n	8005442 <USB_HC_StartXfer+0x4ea>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d04a      	beq.n	8005442 <USB_HC_StartXfer+0x4ea>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	79db      	ldrb	r3, [r3, #7]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d146      	bne.n	8005442 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	7c9b      	ldrb	r3, [r3, #18]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d831      	bhi.n	8005420 <USB_HC_StartXfer+0x4c8>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <USB_HC_StartXfer+0x46c>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053f9 	.word	0x080053f9
 80053cc:	080053d5 	.word	0x080053d5
 80053d0:	080053f9 	.word	0x080053f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	3303      	adds	r3, #3
 80053da:	089b      	lsrs	r3, r3, #2
 80053dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80053de:	8afa      	ldrh	r2, [r7, #22]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d91c      	bls.n	8005424 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f043 0220 	orr.w	r2, r3, #32
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80053f6:	e015      	b.n	8005424 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	3303      	adds	r3, #3
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005402:	8afa      	ldrh	r2, [r7, #22]
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	b29b      	uxth	r3, r3
 800540e:	429a      	cmp	r2, r3
 8005410:	d90a      	bls.n	8005428 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	619a      	str	r2, [r3, #24]
        }
        break;
 800541e:	e003      	b.n	8005428 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005420:	bf00      	nop
 8005422:	e002      	b.n	800542a <USB_HC_StartXfer+0x4d2>
        break;
 8005424:	bf00      	nop
 8005426:	e000      	b.n	800542a <USB_HC_StartXfer+0x4d2>
        break;
 8005428:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6999      	ldr	r1, [r3, #24]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	785a      	ldrb	r2, [r3, #1]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	b29b      	uxth	r3, r3
 8005438:	2000      	movs	r0, #0
 800543a:	9000      	str	r0, [sp, #0]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7ff f9c9 	bl	80047d4 <USB_WritePacket>
  }

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3728      	adds	r7, #40	; 0x28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	b29b      	uxth	r3, r3
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800546e:	b480      	push	{r7}
 8005470:	b089      	sub	sp, #36	; 0x24
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	0c9b      	lsrs	r3, r3, #18
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	0fdb      	lsrs	r3, r3, #31
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	0fdb      	lsrs	r3, r3, #31
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d10d      	bne.n	80054f0 <USB_HC_Halt+0x82>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <USB_HC_Halt+0x82>
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d002      	beq.n	80054ec <USB_HC_Halt+0x7e>
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d101      	bne.n	80054f0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e0d8      	b.n	80056a2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <USB_HC_Halt+0x8e>
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d173      	bne.n	80055e4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	440a      	add	r2, r1
 8005512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800551a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d14a      	bne.n	80055be <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d133      	bne.n	800559c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	440a      	add	r2, r1
 800554a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800554e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005552:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	440a      	add	r2, r1
 800556a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800556e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005572:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	3301      	adds	r3, #1
 8005578:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005580:	d82e      	bhi.n	80055e0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005598:	d0ec      	beq.n	8005574 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800559a:	e081      	b.n	80056a0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055ba:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055bc:	e070      	b.n	80056a0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055de:	e05f      	b.n	80056a0 <USB_HC_Halt+0x232>
            break;
 80055e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055e2:	e05d      	b.n	80056a0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005602:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d133      	bne.n	800567c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	440a      	add	r2, r1
 800562a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800562e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005632:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	440a      	add	r2, r1
 800564a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800564e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005652:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3301      	adds	r3, #1
 8005658:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005660:	d81d      	bhi.n	800569e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005678:	d0ec      	beq.n	8005654 <USB_HC_Halt+0x1e6>
 800567a:	e011      	b.n	80056a0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	440a      	add	r2, r1
 8005692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	e000      	b.n	80056a0 <USB_HC_Halt+0x232>
          break;
 800569e:	bf00      	nop
    }
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3724      	adds	r7, #36	; 0x24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80056c4:	2301      	movs	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	04da      	lsls	r2, r3, #19
 80056cc:	4b15      	ldr	r3, [pc, #84]	; (8005724 <USB_DoPing+0x74>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005700:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	461a      	mov	r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	1ff80000 	.word	0x1ff80000

08005728 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fe ff8c 	bl	800465a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005742:	2110      	movs	r1, #16
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fe ffe5 	bl	8004714 <USB_FlushTxFifo>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff f80f 	bl	8004778 <USB_FlushRxFifo>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005764:	2300      	movs	r3, #0
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	e01f      	b.n	80057aa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005780:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005788:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005790:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	4413      	add	r3, r2
 800579a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579e:	461a      	mov	r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	3301      	adds	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b0f      	cmp	r3, #15
 80057ae:	d9dc      	bls.n	800576a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80057b0:	2300      	movs	r3, #0
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e034      	b.n	8005820 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ea:	461a      	mov	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3301      	adds	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057fc:	d80c      	bhi.n	8005818 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005814:	d0ec      	beq.n	80057f0 <USB_StopHost+0xc8>
 8005816:	e000      	b.n	800581a <USB_StopHost+0xf2>
        break;
 8005818:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	3301      	adds	r3, #1
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	d9c7      	bls.n	80057b6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800582c:	461a      	mov	r2, r3
 800582e:	f04f 33ff 	mov.w	r3, #4294967295
 8005832:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f04f 32ff 	mov.w	r2, #4294967295
 800583a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7fe fefb 	bl	8004638 <USB_EnableGlobalInt>

  return ret;
 8005842:	7ffb      	ldrb	r3, [r7, #31]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800584c:	b590      	push	{r4, r7, lr}
 800584e:	b089      	sub	sp, #36	; 0x24
 8005850:	af04      	add	r7, sp, #16
 8005852:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005854:	2301      	movs	r3, #1
 8005856:	2202      	movs	r2, #2
 8005858:	2102      	movs	r1, #2
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fc85 	bl	800616a <USBH_FindInterface>
 8005860:	4603      	mov	r3, r0
 8005862:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2bff      	cmp	r3, #255	; 0xff
 8005868:	d002      	beq.n	8005870 <USBH_CDC_InterfaceInit+0x24>
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d901      	bls.n	8005874 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005870:	2302      	movs	r3, #2
 8005872:	e13d      	b.n	8005af0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fc5a 	bl	8006132 <USBH_SelectInterface>
 800587e:	4603      	mov	r3, r0
 8005880:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005882:	7bbb      	ldrb	r3, [r7, #14]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005888:	2302      	movs	r3, #2
 800588a:	e131      	b.n	8005af0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005892:	2050      	movs	r0, #80	; 0x50
 8005894:	f002 fb74 	bl	8007f80 <malloc>
 8005898:	4603      	mov	r3, r0
 800589a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80058ac:	2302      	movs	r3, #2
 80058ae:	e11f      	b.n	8005af0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80058b0:	2250      	movs	r2, #80	; 0x50
 80058b2:	2100      	movs	r1, #0
 80058b4:	68b8      	ldr	r0, [r7, #8]
 80058b6:	f002 fc1f 	bl	80080f8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	211a      	movs	r1, #26
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	4413      	add	r3, r2
 80058c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	b25b      	sxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da15      	bge.n	80058fe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	211a      	movs	r1, #26
 80058d8:	fb01 f303 	mul.w	r3, r1, r3
 80058dc:	4413      	add	r3, r2
 80058de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	211a      	movs	r1, #26
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80058f8:	881a      	ldrh	r2, [r3, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 ffce 	bl	80078a6 <USBH_AllocPipe>
 800590a:	4603      	mov	r3, r0
 800590c:	461a      	mov	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	7819      	ldrb	r1, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	7858      	ldrb	r0, [r3, #1]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	8952      	ldrh	r2, [r2, #10]
 800592a:	9202      	str	r2, [sp, #8]
 800592c:	2203      	movs	r2, #3
 800592e:	9201      	str	r2, [sp, #4]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	4623      	mov	r3, r4
 8005934:	4602      	mov	r2, r0
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f001 ff86 	bl	8007848 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f002 fa95 	bl	8007e74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800594a:	2300      	movs	r3, #0
 800594c:	2200      	movs	r2, #0
 800594e:	210a      	movs	r1, #10
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fc0a 	bl	800616a <USBH_FindInterface>
 8005956:	4603      	mov	r3, r0
 8005958:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2bff      	cmp	r3, #255	; 0xff
 800595e:	d002      	beq.n	8005966 <USBH_CDC_InterfaceInit+0x11a>
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d901      	bls.n	800596a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005966:	2302      	movs	r3, #2
 8005968:	e0c2      	b.n	8005af0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	211a      	movs	r1, #26
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	4413      	add	r3, r2
 8005976:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	b25b      	sxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	da16      	bge.n	80059b0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	211a      	movs	r1, #26
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005992:	781a      	ldrb	r2, [r3, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	211a      	movs	r1, #26
 800599e:	fb01 f303 	mul.w	r3, r1, r3
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80059a8:	881a      	ldrh	r2, [r3, #0]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	835a      	strh	r2, [r3, #26]
 80059ae:	e015      	b.n	80059dc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	211a      	movs	r1, #26
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	4413      	add	r3, r2
 80059bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	211a      	movs	r1, #26
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	211a      	movs	r1, #26
 80059e2:	fb01 f303 	mul.w	r3, r1, r3
 80059e6:	4413      	add	r3, r2
 80059e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	b25b      	sxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	da16      	bge.n	8005a22 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	211a      	movs	r1, #26
 80059fa:	fb01 f303 	mul.w	r3, r1, r3
 80059fe:	4413      	add	r3, r2
 8005a00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005a04:	781a      	ldrb	r2, [r3, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	211a      	movs	r1, #26
 8005a10:	fb01 f303 	mul.w	r3, r1, r3
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005a1a:	881a      	ldrh	r2, [r3, #0]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	835a      	strh	r2, [r3, #26]
 8005a20:	e015      	b.n	8005a4e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	211a      	movs	r1, #26
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	211a      	movs	r1, #26
 8005a3e:	fb01 f303 	mul.w	r3, r1, r3
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	7b9b      	ldrb	r3, [r3, #14]
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 ff26 	bl	80078a6 <USBH_AllocPipe>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	7bdb      	ldrb	r3, [r3, #15]
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 ff1c 	bl	80078a6 <USBH_AllocPipe>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	461a      	mov	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	7b59      	ldrb	r1, [r3, #13]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	7b98      	ldrb	r0, [r3, #14]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	8b12      	ldrh	r2, [r2, #24]
 8005a8e:	9202      	str	r2, [sp, #8]
 8005a90:	2202      	movs	r2, #2
 8005a92:	9201      	str	r2, [sp, #4]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4623      	mov	r3, r4
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fed4 	bl	8007848 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	7b19      	ldrb	r1, [r3, #12]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	7bd8      	ldrb	r0, [r3, #15]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	8b52      	ldrh	r2, [r2, #26]
 8005ab8:	9202      	str	r2, [sp, #8]
 8005aba:	2202      	movs	r2, #2
 8005abc:	9201      	str	r2, [sp, #4]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 febf 	bl	8007848 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	7b5b      	ldrb	r3, [r3, #13]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f002 f9ca 	bl	8007e74 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	7b1b      	ldrb	r3, [r3, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f002 f9c3 	bl	8007e74 <USBH_LL_SetToggle>

  return USBH_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd90      	pop	{r4, r7, pc}

08005af8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00e      	beq.n	8005b30 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 feb4 	bl	8007886 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 fedf 	bl	80078e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	7b1b      	ldrb	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00e      	beq.n	8005b56 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	7b1b      	ldrb	r3, [r3, #12]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f001 fea1 	bl	8007886 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	7b1b      	ldrb	r3, [r3, #12]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 fecc 	bl	80078e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	7b5b      	ldrb	r3, [r3, #13]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00e      	beq.n	8005b7c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	7b5b      	ldrb	r3, [r3, #13]
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 fe8e 	bl	8007886 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	7b5b      	ldrb	r3, [r3, #13]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 feb9 	bl	80078e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f002 f9fd 	bl	8007f90 <free>
    phost->pActiveClass->pData = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3340      	adds	r3, #64	; 0x40
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8b1 	bl	8005d2a <GetLineCoding>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d105      	bne.n	8005bde <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bd8:	2102      	movs	r1, #2
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005bde:	7afb      	ldrb	r3, [r7, #11]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d877      	bhi.n	8005cfc <USBH_CDC_Process+0x114>
 8005c0c:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <USBH_CDC_Process+0x2c>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c29 	.word	0x08005c29
 8005c18:	08005c2f 	.word	0x08005c2f
 8005c1c:	08005c5f 	.word	0x08005c5f
 8005c20:	08005cd3 	.word	0x08005cd3
 8005c24:	08005ce1 	.word	0x08005ce1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e06d      	b.n	8005d0a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f897 	bl	8005d68 <SetLineCoding>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005c3e:	7bbb      	ldrb	r3, [r7, #14]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005c4c:	e058      	b.n	8005d00 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d055      	beq.n	8005d00 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2204      	movs	r2, #4
 8005c58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005c5c:	e050      	b.n	8005d00 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	3340      	adds	r3, #64	; 0x40
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f860 	bl	8005d2a <GetLineCoding>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005c6e:	7bbb      	ldrb	r3, [r7, #14]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d126      	bne.n	8005cc2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c86:	791b      	ldrb	r3, [r3, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d13b      	bne.n	8005d04 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c96:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d133      	bne.n	8005d04 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d12b      	bne.n	8005d04 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d124      	bne.n	8005d04 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f958 	bl	8005f70 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005cc0:	e020      	b.n	8005d04 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d01d      	beq.n	8005d04 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005cd0:	e018      	b.n	8005d04 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f867 	bl	8005da6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f8da 	bl	8005e92 <CDC_ProcessReception>
      break;
 8005cde:	e014      	b.n	8005d0a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 f822 	bl	8006d2c <USBH_ClrFeature>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005cec:	7bbb      	ldrb	r3, [r7, #14]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005cfa:	e005      	b.n	8005d08 <USBH_CDC_Process+0x120>

    default:
      break;
 8005cfc:	bf00      	nop
 8005cfe:	e004      	b.n	8005d0a <USBH_CDC_Process+0x122>
      break;
 8005d00:	bf00      	nop
 8005d02:	e002      	b.n	8005d0a <USBH_CDC_Process+0x122>
      break;
 8005d04:	bf00      	nop
 8005d06:	e000      	b.n	8005d0a <USBH_CDC_Process+0x122>
      break;
 8005d08:	bf00      	nop

  }

  return status;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	22a1      	movs	r2, #161	; 0xa1
 8005d38:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2221      	movs	r2, #33	; 0x21
 8005d3e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2207      	movs	r2, #7
 8005d50:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2207      	movs	r2, #7
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fb23 	bl	80073a4 <USBH_CtlReq>
 8005d5e:	4603      	mov	r3, r0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2221      	movs	r2, #33	; 0x21
 8005d76:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2207      	movs	r2, #7
 8005d8e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2207      	movs	r2, #7
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 fb04 	bl	80073a4 <USBH_CtlReq>
 8005d9c:	4603      	mov	r3, r0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af02      	add	r7, sp, #8
 8005dac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d002      	beq.n	8005dcc <CDC_ProcessTransmission+0x26>
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d023      	beq.n	8005e12 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005dca:	e05e      	b.n	8005e8a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	8b12      	ldrh	r2, [r2, #24]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d90b      	bls.n	8005df0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	69d9      	ldr	r1, [r3, #28]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8b1a      	ldrh	r2, [r3, #24]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	7b5b      	ldrb	r3, [r3, #13]
 8005de4:	2001      	movs	r0, #1
 8005de6:	9000      	str	r0, [sp, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 fcea 	bl	80077c2 <USBH_BulkSendData>
 8005dee:	e00b      	b.n	8005e08 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	7b5b      	ldrb	r3, [r3, #13]
 8005dfe:	2001      	movs	r0, #1
 8005e00:	9000      	str	r0, [sp, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 fcdd 	bl	80077c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005e10:	e03b      	b.n	8005e8a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	7b5b      	ldrb	r3, [r3, #13]
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f002 f801 	bl	8007e20 <USBH_LL_GetURBState>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005e22:	7afb      	ldrb	r3, [r7, #11]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d128      	bne.n	8005e7a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	8b12      	ldrh	r2, [r2, #24]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d90e      	bls.n	8005e52 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	8b12      	ldrh	r2, [r2, #24]
 8005e3c:	1a9a      	subs	r2, r3, r2
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	8b12      	ldrh	r2, [r2, #24]
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	61da      	str	r2, [r3, #28]
 8005e50:	e002      	b.n	8005e58 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005e68:	e00e      	b.n	8005e88 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f868 	bl	8005f48 <USBH_CDC_TransmitCallback>
      break;
 8005e78:	e006      	b.n	8005e88 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005e7a:	7afb      	ldrb	r3, [r7, #11]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d103      	bne.n	8005e88 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005e88:	bf00      	nop
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b086      	sub	sp, #24
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d002      	beq.n	8005eb8 <CDC_ProcessReception+0x26>
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d00e      	beq.n	8005ed4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005eb6:	e043      	b.n	8005f40 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6a19      	ldr	r1, [r3, #32]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	8b5a      	ldrh	r2, [r3, #26]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	7b1b      	ldrb	r3, [r3, #12]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 fca1 	bl	800780c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005ed2:	e035      	b.n	8005f40 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	7b1b      	ldrb	r3, [r3, #12]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 ffa0 	bl	8007e20 <USBH_LL_GetURBState>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d129      	bne.n	8005f3e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	7b1b      	ldrb	r3, [r3, #12]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 ff03 	bl	8007cfc <USBH_LL_GetLastXferSize>
 8005ef6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d016      	beq.n	8005f30 <CDC_ProcessReception+0x9e>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	8b5b      	ldrh	r3, [r3, #26]
 8005f06:	461a      	mov	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d910      	bls.n	8005f30 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1ad2      	subs	r2, r2, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	441a      	add	r2, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2203      	movs	r2, #3
 8005f2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005f2e:	e006      	b.n	8005f3e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f80f 	bl	8005f5c <USBH_CDC_ReceiveCallback>
      break;
 8005f3e:	bf00      	nop
  }
}
 8005f40:	bf00      	nop
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e029      	b.n	8005ff0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	79fa      	ldrb	r2, [r7, #7]
 8005fa0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f81f 	bl	8005ff8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f001 fdd3 	bl	8007b94 <USBH_LL_Init>

  return USBH_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	e009      	b.n	800601e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	33e0      	adds	r3, #224	; 0xe0
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b0f      	cmp	r3, #15
 8006022:	d9f2      	bls.n	800600a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e009      	b.n	800603e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006044:	d3f1      	bcc.n	800602a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2240      	movs	r2, #64	; 0x40
 800606a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	331c      	adds	r3, #28
 8006096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f002 f82b 	bl	80080f8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80060a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f002 f822 	bl	80080f8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f203 3326 	addw	r3, r3, #806	; 0x326
 80060ba:	2212      	movs	r2, #18
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f002 f81a 	bl	80080f8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80060ca:	223e      	movs	r2, #62	; 0x3e
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f002 f812 	bl	80080f8 <memset>

  return USBH_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10e      	bne.n	800611a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	33de      	adds	r3, #222	; 0xde
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	e004      	b.n	8006124 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800611a:	2302      	movs	r3, #2
 800611c:	73fb      	strb	r3, [r7, #15]
 800611e:	e001      	b.n	8006124 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006120:	2302      	movs	r3, #2
 8006122:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	460b      	mov	r3, r1
 800613c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006148:	78fa      	ldrb	r2, [r7, #3]
 800614a:	429a      	cmp	r2, r3
 800614c:	d204      	bcs.n	8006158 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006156:	e001      	b.n	800615c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006158:	2302      	movs	r3, #2
 800615a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800616a:	b480      	push	{r7}
 800616c:	b087      	sub	sp, #28
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	4608      	mov	r0, r1
 8006174:	4611      	mov	r1, r2
 8006176:	461a      	mov	r2, r3
 8006178:	4603      	mov	r3, r0
 800617a:	70fb      	strb	r3, [r7, #3]
 800617c:	460b      	mov	r3, r1
 800617e:	70bb      	strb	r3, [r7, #2]
 8006180:	4613      	mov	r3, r2
 8006182:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006188:	2300      	movs	r3, #0
 800618a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006192:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006194:	e025      	b.n	80061e2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	221a      	movs	r2, #26
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	3308      	adds	r3, #8
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	3302      	adds	r3, #2
 80061a6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	795b      	ldrb	r3, [r3, #5]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d002      	beq.n	80061b8 <USBH_FindInterface+0x4e>
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	2bff      	cmp	r3, #255	; 0xff
 80061b6:	d111      	bne.n	80061dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80061bc:	78ba      	ldrb	r2, [r7, #2]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d002      	beq.n	80061c8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061c2:	78bb      	ldrb	r3, [r7, #2]
 80061c4:	2bff      	cmp	r3, #255	; 0xff
 80061c6:	d109      	bne.n	80061dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061cc:	787a      	ldrb	r2, [r7, #1]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d002      	beq.n	80061d8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80061d2:	787b      	ldrb	r3, [r7, #1]
 80061d4:	2bff      	cmp	r3, #255	; 0xff
 80061d6:	d101      	bne.n	80061dc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	e006      	b.n	80061ea <USBH_FindInterface+0x80>
    }
    if_ix++;
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	3301      	adds	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d9d6      	bls.n	8006196 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80061e8:	23ff      	movs	r3, #255	; 0xff
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fd04 	bl	8007c0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006204:	2101      	movs	r1, #1
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fe1d 	bl	8007e46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af04      	add	r7, sp, #16
 800621e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006220:	2302      	movs	r3, #2
 8006222:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d102      	bne.n	800623a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2203      	movs	r2, #3
 8006238:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b0b      	cmp	r3, #11
 8006242:	f200 81be 	bhi.w	80065c2 <USBH_Process+0x3aa>
 8006246:	a201      	add	r2, pc, #4	; (adr r2, 800624c <USBH_Process+0x34>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	0800627d 	.word	0x0800627d
 8006250:	080062af 	.word	0x080062af
 8006254:	08006317 	.word	0x08006317
 8006258:	0800655d 	.word	0x0800655d
 800625c:	080065c3 	.word	0x080065c3
 8006260:	080063bb 	.word	0x080063bb
 8006264:	08006503 	.word	0x08006503
 8006268:	080063f1 	.word	0x080063f1
 800626c:	08006411 	.word	0x08006411
 8006270:	08006431 	.word	0x08006431
 8006274:	08006475 	.word	0x08006475
 8006278:	08006545 	.word	0x08006545
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 819e 	beq.w	80065c6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006290:	20c8      	movs	r0, #200	; 0xc8
 8006292:	f001 fe22 	bl	8007eda <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 fd15 	bl	8007cc6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80062ac:	e18b      	b.n	80065c6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d107      	bne.n	80062c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062c6:	e18d      	b.n	80065e4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d2:	d914      	bls.n	80062fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062da:	3301      	adds	r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d903      	bls.n	80062f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	220d      	movs	r2, #13
 80062f2:	701a      	strb	r2, [r3, #0]
      break;
 80062f4:	e176      	b.n	80065e4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
      break;
 80062fc:	e172      	b.n	80065e4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006304:	f103 020a 	add.w	r2, r3, #10
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800630e:	200a      	movs	r0, #10
 8006310:	f001 fde3 	bl	8007eda <USBH_Delay>
      break;
 8006314:	e166      	b.n	80065e4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006326:	2104      	movs	r1, #4
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800632c:	2064      	movs	r0, #100	; 0x64
 800632e:	f001 fdd4 	bl	8007eda <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fca0 	bl	8007c78 <USBH_LL_GetSpeed>
 8006338:	4603      	mov	r3, r0
 800633a:	461a      	mov	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2205      	movs	r2, #5
 8006346:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006348:	2100      	movs	r1, #0
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 faab 	bl	80078a6 <USBH_AllocPipe>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006358:	2180      	movs	r1, #128	; 0x80
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 faa3 	bl	80078a6 <USBH_AllocPipe>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7919      	ldrb	r1, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800637c:	b292      	uxth	r2, r2
 800637e:	9202      	str	r2, [sp, #8]
 8006380:	2200      	movs	r2, #0
 8006382:	9201      	str	r2, [sp, #4]
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	4603      	mov	r3, r0
 8006388:	2280      	movs	r2, #128	; 0x80
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fa5c 	bl	8007848 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	7959      	ldrb	r1, [r3, #5]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80063a4:	b292      	uxth	r2, r2
 80063a6:	9202      	str	r2, [sp, #8]
 80063a8:	2200      	movs	r2, #0
 80063aa:	9201      	str	r2, [sp, #4]
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4603      	mov	r3, r0
 80063b0:	2200      	movs	r2, #0
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fa48 	bl	8007848 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063b8:	e114      	b.n	80065e4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f918 	bl	80065f0 <USBH_HandleEnum>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f040 80fe 	bne.w	80065ca <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d103      	bne.n	80063e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2208      	movs	r2, #8
 80063e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80063e6:	e0f0      	b.n	80065ca <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2207      	movs	r2, #7
 80063ec:	701a      	strb	r2, [r3, #0]
      break;
 80063ee:	e0ec      	b.n	80065ca <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80e9 	beq.w	80065ce <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006402:	2101      	movs	r1, #1
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2208      	movs	r2, #8
 800640c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800640e:	e0de      	b.n	80065ce <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006416:	b29b      	uxth	r3, r3
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fc3f 	bl	8006c9e <USBH_SetCfg>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	f040 80d5 	bne.w	80065d2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2209      	movs	r2, #9
 800642c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800642e:	e0d0      	b.n	80065d2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800643e:	2101      	movs	r1, #1
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fc4f 	bl	8006ce4 <USBH_SetFeature>
 8006446:	4603      	mov	r3, r0
 8006448:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	220a      	movs	r2, #10
 8006456:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006458:	e0bd      	b.n	80065d6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b03      	cmp	r3, #3
 8006460:	f040 80b9 	bne.w	80065d6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	220a      	movs	r2, #10
 8006468:	701a      	strb	r2, [r3, #0]
      break;
 800646a:	e0b4      	b.n	80065d6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	220a      	movs	r2, #10
 8006470:	701a      	strb	r2, [r3, #0]
      break;
 8006472:	e0b0      	b.n	80065d6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80ad 	beq.w	80065da <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006488:	2300      	movs	r3, #0
 800648a:	73fb      	strb	r3, [r7, #15]
 800648c:	e016      	b.n	80064bc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800648e:	7bfa      	ldrb	r2, [r7, #15]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	32de      	adds	r2, #222	; 0xde
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	791a      	ldrb	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d108      	bne.n	80064b6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80064a4:	7bfa      	ldrb	r2, [r7, #15]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	32de      	adds	r2, #222	; 0xde
 80064aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80064b4:	e005      	b.n	80064c2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	3301      	adds	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0e5      	beq.n	800648e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d016      	beq.n	80064fa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2206      	movs	r2, #6
 80064e2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064ea:	2103      	movs	r1, #3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80064f0:	e073      	b.n	80065da <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	220d      	movs	r2, #13
 80064f6:	701a      	strb	r2, [r3, #0]
      break;
 80064f8:	e06f      	b.n	80065da <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	220d      	movs	r2, #13
 80064fe:	701a      	strb	r2, [r3, #0]
      break;
 8006500:	e06b      	b.n	80065da <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d017      	beq.n	800653c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
 8006518:	4603      	mov	r3, r0
 800651a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d103      	bne.n	800652c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	220b      	movs	r2, #11
 8006528:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800652a:	e058      	b.n	80065de <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d154      	bne.n	80065de <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	220d      	movs	r2, #13
 8006538:	701a      	strb	r2, [r3, #0]
      break;
 800653a:	e050      	b.n	80065de <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	220d      	movs	r2, #13
 8006540:	701a      	strb	r2, [r3, #0]
      break;
 8006542:	e04c      	b.n	80065de <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d049      	beq.n	80065e2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	4798      	blx	r3
      }
      break;
 800655a:	e042      	b.n	80065e2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fd47 	bl	8005ff8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006598:	2105      	movs	r1, #5
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d107      	bne.n	80065ba <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fe1f 	bl	80061f6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80065b8:	e014      	b.n	80065e4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fb26 	bl	8007c0c <USBH_LL_Start>
      break;
 80065c0:	e010      	b.n	80065e4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80065c2:	bf00      	nop
 80065c4:	e00e      	b.n	80065e4 <USBH_Process+0x3cc>
      break;
 80065c6:	bf00      	nop
 80065c8:	e00c      	b.n	80065e4 <USBH_Process+0x3cc>
      break;
 80065ca:	bf00      	nop
 80065cc:	e00a      	b.n	80065e4 <USBH_Process+0x3cc>
    break;
 80065ce:	bf00      	nop
 80065d0:	e008      	b.n	80065e4 <USBH_Process+0x3cc>
      break;
 80065d2:	bf00      	nop
 80065d4:	e006      	b.n	80065e4 <USBH_Process+0x3cc>
      break;
 80065d6:	bf00      	nop
 80065d8:	e004      	b.n	80065e4 <USBH_Process+0x3cc>
      break;
 80065da:	bf00      	nop
 80065dc:	e002      	b.n	80065e4 <USBH_Process+0x3cc>
      break;
 80065de:	bf00      	nop
 80065e0:	e000      	b.n	80065e4 <USBH_Process+0x3cc>
      break;
 80065e2:	bf00      	nop
  }
  return USBH_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop

080065f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af04      	add	r7, sp, #16
 80065f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80065f8:	2301      	movs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80065fc:	2301      	movs	r3, #1
 80065fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	2b07      	cmp	r3, #7
 8006606:	f200 81c1 	bhi.w	800698c <USBH_HandleEnum+0x39c>
 800660a:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <USBH_HandleEnum+0x20>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006631 	.word	0x08006631
 8006614:	080066ef 	.word	0x080066ef
 8006618:	08006759 	.word	0x08006759
 800661c:	080067e7 	.word	0x080067e7
 8006620:	08006851 	.word	0x08006851
 8006624:	080068c1 	.word	0x080068c1
 8006628:	08006907 	.word	0x08006907
 800662c:	0800694d 	.word	0x0800694d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006630:	2108      	movs	r1, #8
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa50 	bl	8006ad8 <USBH_Get_DevDesc>
 8006638:	4603      	mov	r3, r0
 800663a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d130      	bne.n	80066a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	7919      	ldrb	r1, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006666:	b292      	uxth	r2, r2
 8006668:	9202      	str	r2, [sp, #8]
 800666a:	2200      	movs	r2, #0
 800666c:	9201      	str	r2, [sp, #4]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	4603      	mov	r3, r0
 8006672:	2280      	movs	r2, #128	; 0x80
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f8e7 	bl	8007848 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	7959      	ldrb	r1, [r3, #5]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800668e:	b292      	uxth	r2, r2
 8006690:	9202      	str	r2, [sp, #8]
 8006692:	2200      	movs	r2, #0
 8006694:	9201      	str	r2, [sp, #4]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	4603      	mov	r3, r0
 800669a:	2200      	movs	r2, #0
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f8d3 	bl	8007848 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80066a2:	e175      	b.n	8006990 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	f040 8172 	bne.w	8006990 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066b2:	3301      	adds	r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d903      	bls.n	80066ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	220d      	movs	r2, #13
 80066ca:	701a      	strb	r2, [r3, #0]
      break;
 80066cc:	e160      	b.n	8006990 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	795b      	ldrb	r3, [r3, #5]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 f907 	bl	80078e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	791b      	ldrb	r3, [r3, #4]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 f901 	bl	80078e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
      break;
 80066ec:	e150      	b.n	8006990 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80066ee:	2112      	movs	r1, #18
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f9f1 	bl	8006ad8 <USBH_Get_DevDesc>
 80066f6:	4603      	mov	r3, r0
 80066f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006706:	e145      	b.n	8006994 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	2b03      	cmp	r3, #3
 800670c:	f040 8142 	bne.w	8006994 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006716:	3301      	adds	r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006726:	2b03      	cmp	r3, #3
 8006728:	d903      	bls.n	8006732 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	220d      	movs	r2, #13
 800672e:	701a      	strb	r2, [r3, #0]
      break;
 8006730:	e130      	b.n	8006994 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	795b      	ldrb	r3, [r3, #5]
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 f8d5 	bl	80078e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	791b      	ldrb	r3, [r3, #4]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 f8cf 	bl	80078e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]
      break;
 8006756:	e11d      	b.n	8006994 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006758:	2101      	movs	r1, #1
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa7b 	bl	8006c56 <USBH_SetAddress>
 8006760:	4603      	mov	r3, r0
 8006762:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d132      	bne.n	80067d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800676a:	2002      	movs	r0, #2
 800676c:	f001 fbb5 	bl	8007eda <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2203      	movs	r2, #3
 800677c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	7919      	ldrb	r1, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006792:	b292      	uxth	r2, r2
 8006794:	9202      	str	r2, [sp, #8]
 8006796:	2200      	movs	r2, #0
 8006798:	9201      	str	r2, [sp, #4]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	4603      	mov	r3, r0
 800679e:	2280      	movs	r2, #128	; 0x80
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 f851 	bl	8007848 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	7959      	ldrb	r1, [r3, #5]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80067ba:	b292      	uxth	r2, r2
 80067bc:	9202      	str	r2, [sp, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	9201      	str	r2, [sp, #4]
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	4603      	mov	r3, r0
 80067c6:	2200      	movs	r2, #0
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 f83d 	bl	8007848 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80067ce:	e0e3      	b.n	8006998 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	f040 80e0 	bne.w	8006998 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	220d      	movs	r2, #13
 80067dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	705a      	strb	r2, [r3, #1]
      break;
 80067e4:	e0d8      	b.n	8006998 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80067e6:	2109      	movs	r1, #9
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f9a1 	bl	8006b30 <USBH_Get_CfgDesc>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d103      	bne.n	8006800 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2204      	movs	r2, #4
 80067fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80067fe:	e0cd      	b.n	800699c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	2b03      	cmp	r3, #3
 8006804:	f040 80ca 	bne.w	800699c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800680e:	3301      	adds	r3, #1
 8006810:	b2da      	uxtb	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800681e:	2b03      	cmp	r3, #3
 8006820:	d903      	bls.n	800682a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	220d      	movs	r2, #13
 8006826:	701a      	strb	r2, [r3, #0]
      break;
 8006828:	e0b8      	b.n	800699c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	795b      	ldrb	r3, [r3, #5]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 f859 	bl	80078e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	791b      	ldrb	r3, [r3, #4]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 f853 	bl	80078e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	701a      	strb	r2, [r3, #0]
      break;
 800684e:	e0a5      	b.n	800699c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f969 	bl	8006b30 <USBH_Get_CfgDesc>
 800685e:	4603      	mov	r3, r0
 8006860:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d103      	bne.n	8006870 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2205      	movs	r2, #5
 800686c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800686e:	e097      	b.n	80069a0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	2b03      	cmp	r3, #3
 8006874:	f040 8094 	bne.w	80069a0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800687e:	3301      	adds	r3, #1
 8006880:	b2da      	uxtb	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800688e:	2b03      	cmp	r3, #3
 8006890:	d903      	bls.n	800689a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	220d      	movs	r2, #13
 8006896:	701a      	strb	r2, [r3, #0]
      break;
 8006898:	e082      	b.n	80069a0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	795b      	ldrb	r3, [r3, #5]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f821 	bl	80078e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 f81b 	bl	80078e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
      break;
 80068be:	e06f      	b.n	80069a0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d019      	beq.n	80068fe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80068d6:	23ff      	movs	r3, #255	; 0xff
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f953 	bl	8006b84 <USBH_Get_StringDesc>
 80068de:	4603      	mov	r3, r0
 80068e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d103      	bne.n	80068f0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2206      	movs	r2, #6
 80068ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068ee:	e059      	b.n	80069a4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d156      	bne.n	80069a4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2206      	movs	r2, #6
 80068fa:	705a      	strb	r2, [r3, #1]
      break;
 80068fc:	e052      	b.n	80069a4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2206      	movs	r2, #6
 8006902:	705a      	strb	r2, [r3, #1]
      break;
 8006904:	e04e      	b.n	80069a4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800690c:	2b00      	cmp	r3, #0
 800690e:	d019      	beq.n	8006944 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800691c:	23ff      	movs	r3, #255	; 0xff
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f930 	bl	8006b84 <USBH_Get_StringDesc>
 8006924:	4603      	mov	r3, r0
 8006926:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2207      	movs	r2, #7
 8006932:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006934:	e038      	b.n	80069a8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006936:	7bbb      	ldrb	r3, [r7, #14]
 8006938:	2b03      	cmp	r3, #3
 800693a:	d135      	bne.n	80069a8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2207      	movs	r2, #7
 8006940:	705a      	strb	r2, [r3, #1]
      break;
 8006942:	e031      	b.n	80069a8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2207      	movs	r2, #7
 8006948:	705a      	strb	r2, [r3, #1]
      break;
 800694a:	e02d      	b.n	80069a8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006952:	2b00      	cmp	r3, #0
 8006954:	d017      	beq.n	8006986 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006962:	23ff      	movs	r3, #255	; 0xff
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f90d 	bl	8006b84 <USBH_Get_StringDesc>
 800696a:	4603      	mov	r3, r0
 800696c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d102      	bne.n	800697a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006978:	e018      	b.n	80069ac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	2b03      	cmp	r3, #3
 800697e:	d115      	bne.n	80069ac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
      break;
 8006984:	e012      	b.n	80069ac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
      break;
 800698a:	e00f      	b.n	80069ac <USBH_HandleEnum+0x3bc>

    default:
      break;
 800698c:	bf00      	nop
 800698e:	e00e      	b.n	80069ae <USBH_HandleEnum+0x3be>
      break;
 8006990:	bf00      	nop
 8006992:	e00c      	b.n	80069ae <USBH_HandleEnum+0x3be>
      break;
 8006994:	bf00      	nop
 8006996:	e00a      	b.n	80069ae <USBH_HandleEnum+0x3be>
      break;
 8006998:	bf00      	nop
 800699a:	e008      	b.n	80069ae <USBH_HandleEnum+0x3be>
      break;
 800699c:	bf00      	nop
 800699e:	e006      	b.n	80069ae <USBH_HandleEnum+0x3be>
      break;
 80069a0:	bf00      	nop
 80069a2:	e004      	b.n	80069ae <USBH_HandleEnum+0x3be>
      break;
 80069a4:	bf00      	nop
 80069a6:	e002      	b.n	80069ae <USBH_HandleEnum+0x3be>
      break;
 80069a8:	bf00      	nop
 80069aa:	e000      	b.n	80069ae <USBH_HandleEnum+0x3be>
      break;
 80069ac:	bf00      	nop
  }
  return Status;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f804 	bl	80069fa <USBH_HandleSof>
}
 80069f2:	bf00      	nop
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b082      	sub	sp, #8
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b0b      	cmp	r3, #11
 8006a0a:	d10a      	bne.n	8006a22 <USBH_HandleSof+0x28>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
  }
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006a3a:	bf00      	nop
}
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006a56:	bf00      	nop
}
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f8c6 	bl	8007c42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	791b      	ldrb	r3, [r3, #4]
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 ff13 	bl	80078e8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	795b      	ldrb	r3, [r3, #5]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 ff0d 	bl	80078e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aea:	d901      	bls.n	8006af0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e01b      	b.n	8006b28 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006af6:	887b      	ldrh	r3, [r7, #2]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4613      	mov	r3, r2
 8006afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b00:	2100      	movs	r1, #0
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f872 	bl	8006bec <USBH_GetDescriptor>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b18:	887a      	ldrh	r2, [r7, #2]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f929 	bl	8006d74 <USBH_ParseDevDesc>
 8006b22:	4603      	mov	r3, r0
 8006b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	331c      	adds	r3, #28
 8006b40:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8006b42:	887b      	ldrh	r3, [r7, #2]
 8006b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b48:	d901      	bls.n	8006b4e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e016      	b.n	8006b7c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006b4e:	887b      	ldrh	r3, [r7, #2]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f846 	bl	8006bec <USBH_GetDescriptor>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d107      	bne.n	8006b7a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006b6a:	887b      	ldrh	r3, [r7, #2]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f9b3 	bl	8006edc <USBH_ParseCfgDesc>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	460b      	mov	r3, r1
 8006b92:	72fb      	strb	r3, [r7, #11]
 8006b94:	4613      	mov	r3, r2
 8006b96:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8006b98:	893b      	ldrh	r3, [r7, #8]
 8006b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b9e:	d802      	bhi.n	8006ba6 <USBH_Get_StringDesc+0x22>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e01c      	b.n	8006be4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006bb2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006bba:	893b      	ldrh	r3, [r7, #8]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 f812 	bl	8006bec <USBH_GetDescriptor>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006bd8:	893a      	ldrh	r2, [r7, #8]
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fb93 	bl	8007308 <USBH_ParseStringDesc>
  }

  return status;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	607b      	str	r3, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	72fb      	strb	r3, [r7, #11]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	789b      	ldrb	r3, [r3, #2]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d11c      	bne.n	8006c40 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2206      	movs	r2, #6
 8006c16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	893a      	ldrh	r2, [r7, #8]
 8006c1c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006c1e:	893b      	ldrh	r3, [r7, #8]
 8006c20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c28:	d104      	bne.n	8006c34 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f240 4209 	movw	r2, #1033	; 0x409
 8006c30:	829a      	strh	r2, [r3, #20]
 8006c32:	e002      	b.n	8006c3a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8b3a      	ldrh	r2, [r7, #24]
 8006c3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006c40:	8b3b      	ldrh	r3, [r7, #24]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fbac 	bl	80073a4 <USBH_CtlReq>
 8006c4c:	4603      	mov	r3, r0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	789b      	ldrb	r3, [r3, #2]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10f      	bne.n	8006c8a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2205      	movs	r2, #5
 8006c74:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006c76:	78fb      	ldrb	r3, [r7, #3]
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fb88 	bl	80073a4 <USBH_CtlReq>
 8006c94:	4603      	mov	r3, r0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	789b      	ldrb	r3, [r3, #2]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d10e      	bne.n	8006cd0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2209      	movs	r2, #9
 8006cbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	887a      	ldrh	r2, [r7, #2]
 8006cc2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fb65 	bl	80073a4 <USBH_CtlReq>
 8006cda:	4603      	mov	r3, r0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	789b      	ldrb	r3, [r3, #2]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d10f      	bne.n	8006d18 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2203      	movs	r2, #3
 8006d02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fb41 	bl	80073a4 <USBH_CtlReq>
 8006d22:	4603      	mov	r3, r0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	789b      	ldrb	r3, [r3, #2]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d10f      	bne.n	8006d60 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006d60:	2200      	movs	r2, #0
 8006d62:	2100      	movs	r1, #0
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fb1d 	bl	80073a4 <USBH_CtlReq>
 8006d6a:	4603      	mov	r3, r0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f203 3326 	addw	r3, r3, #806	; 0x326
 8006d88:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8006d94:	2302      	movs	r3, #2
 8006d96:	e098      	b.n	8006eca <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	781a      	ldrb	r2, [r3, #0]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	785a      	ldrb	r2, [r3, #1]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	3302      	adds	r3, #2
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	3303      	adds	r3, #3
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	791a      	ldrb	r2, [r3, #4]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	795a      	ldrb	r2, [r3, #5]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	799a      	ldrb	r2, [r3, #6]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	79da      	ldrb	r2, [r3, #7]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d11b      	bne.n	8006e30 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	79db      	ldrb	r3, [r3, #7]
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	dc0f      	bgt.n	8006e20 <USBH_ParseDevDesc+0xac>
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	db0f      	blt.n	8006e24 <USBH_ParseDevDesc+0xb0>
 8006e04:	3b08      	subs	r3, #8
 8006e06:	4a34      	ldr	r2, [pc, #208]	; (8006ed8 <USBH_ParseDevDesc+0x164>)
 8006e08:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bf14      	ite	ne
 8006e14:	2301      	movne	r3, #1
 8006e16:	2300      	moveq	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <USBH_ParseDevDesc+0xb8>
 8006e1e:	e001      	b.n	8006e24 <USBH_ParseDevDesc+0xb0>
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	d003      	beq.n	8006e2c <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	2208      	movs	r2, #8
 8006e28:	71da      	strb	r2, [r3, #7]
        break;
 8006e2a:	e000      	b.n	8006e2e <USBH_ParseDevDesc+0xba>
        break;
 8006e2c:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8006e2e:	e00e      	b.n	8006e4e <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d107      	bne.n	8006e4a <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	79db      	ldrb	r3, [r3, #7]
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d005      	beq.n	8006e4e <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2208      	movs	r2, #8
 8006e46:	71da      	strb	r2, [r3, #7]
 8006e48:	e001      	b.n	8006e4e <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d939      	bls.n	8006ec8 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	3308      	adds	r3, #8
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	3309      	adds	r3, #9
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	330a      	adds	r3, #10
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	330b      	adds	r3, #11
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4313      	orrs	r3, r2
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	330d      	adds	r3, #13
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	7b9a      	ldrb	r2, [r3, #14]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	7bda      	ldrb	r2, [r3, #15]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	7c1a      	ldrb	r2, [r3, #16]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	7c5a      	ldrb	r2, [r3, #17]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	01000101 	.word	0x01000101

08006edc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08c      	sub	sp, #48	; 0x30
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ef0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e0db      	b.n	80070c6 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	781a      	ldrb	r2, [r3, #0]
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	785a      	ldrb	r2, [r3, #1]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	3302      	adds	r3, #2
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	3303      	adds	r3, #3
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3e:	bf28      	it	cs
 8006f40:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	791a      	ldrb	r2, [r3, #4]
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	795a      	ldrb	r2, [r3, #5]
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	799a      	ldrb	r2, [r3, #6]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	79da      	ldrb	r2, [r3, #7]
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	7a1a      	ldrb	r2, [r3, #8]
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b09      	cmp	r3, #9
 8006f78:	d002      	beq.n	8006f80 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	2209      	movs	r2, #9
 8006f7e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	f240 809d 	bls.w	80070c2 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8006f88:	2309      	movs	r3, #9
 8006f8a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f90:	e081      	b.n	8007096 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f92:	f107 0316 	add.w	r3, r7, #22
 8006f96:	4619      	mov	r1, r3
 8006f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9a:	f000 f9e8 	bl	800736e <USBH_GetNextDesc>
 8006f9e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d176      	bne.n	8007096 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b09      	cmp	r3, #9
 8006fae:	d002      	beq.n	8006fb6 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	2209      	movs	r2, #9
 8006fb4:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fba:	221a      	movs	r2, #26
 8006fbc:	fb02 f303 	mul.w	r3, r2, r3
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	6a3a      	ldr	r2, [r7, #32]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	3302      	adds	r3, #2
 8006fc8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fcc:	69f8      	ldr	r0, [r7, #28]
 8006fce:	f000 f87e 	bl	80070ce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006fdc:	e043      	b.n	8007066 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006fde:	f107 0316 	add.w	r3, r7, #22
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe6:	f000 f9c2 	bl	800736e <USBH_GetNextDesc>
 8006fea:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	2b05      	cmp	r3, #5
 8006ff2:	d138      	bne.n	8007066 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	795b      	ldrb	r3, [r3, #5]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d113      	bne.n	8007024 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007000:	2b02      	cmp	r3, #2
 8007002:	d003      	beq.n	800700c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	799b      	ldrb	r3, [r3, #6]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d10b      	bne.n	8007024 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	79db      	ldrb	r3, [r3, #7]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10b      	bne.n	800702c <USBH_ParseCfgDesc+0x150>
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b09      	cmp	r3, #9
 800701a:	d007      	beq.n	800702c <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	2209      	movs	r2, #9
 8007020:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007022:	e003      	b.n	800702c <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	2207      	movs	r2, #7
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	e000      	b.n	800702e <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800702c:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800702e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007032:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007036:	3201      	adds	r2, #1
 8007038:	00d2      	lsls	r2, r2, #3
 800703a:	211a      	movs	r1, #26
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	4413      	add	r3, r2
 8007042:	3308      	adds	r3, #8
 8007044:	6a3a      	ldr	r2, [r7, #32]
 8007046:	4413      	add	r3, r2
 8007048:	3304      	adds	r3, #4
 800704a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800704c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800704e:	69b9      	ldr	r1, [r7, #24]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f870 	bl	8007136 <USBH_ParseEPDesc>
 8007056:	4603      	mov	r3, r0
 8007058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800705c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007060:	3301      	adds	r3, #1
 8007062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	791b      	ldrb	r3, [r3, #4]
 800706a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800706e:	429a      	cmp	r2, r3
 8007070:	d204      	bcs.n	800707c <USBH_ParseCfgDesc+0x1a0>
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	885a      	ldrh	r2, [r3, #2]
 8007076:	8afb      	ldrh	r3, [r7, #22]
 8007078:	429a      	cmp	r2, r3
 800707a:	d8b0      	bhi.n	8006fde <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	791b      	ldrb	r3, [r3, #4]
 8007080:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007084:	429a      	cmp	r2, r3
 8007086:	d201      	bcs.n	800708c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8007088:	2303      	movs	r3, #3
 800708a:	e01c      	b.n	80070c6 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800708c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007090:	3301      	adds	r3, #1
 8007092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800709a:	2b01      	cmp	r3, #1
 800709c:	d805      	bhi.n	80070aa <USBH_ParseCfgDesc+0x1ce>
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	885a      	ldrh	r2, [r3, #2]
 80070a2:	8afb      	ldrh	r3, [r7, #22]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	f63f af74 	bhi.w	8006f92 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	791b      	ldrb	r3, [r3, #4]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	bf28      	it	cs
 80070b2:	2302      	movcs	r3, #2
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d201      	bcs.n	80070c2 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 80070be:	2303      	movs	r3, #3
 80070c0:	e001      	b.n	80070c6 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 80070c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3730      	adds	r7, #48	; 0x30
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781a      	ldrb	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	785a      	ldrb	r2, [r3, #1]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	789a      	ldrb	r2, [r3, #2]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	78da      	ldrb	r2, [r3, #3]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	3304      	adds	r3, #4
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	bf28      	it	cs
 8007102:	2302      	movcs	r3, #2
 8007104:	b2da      	uxtb	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	795a      	ldrb	r2, [r3, #5]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	799a      	ldrb	r2, [r3, #6]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	79da      	ldrb	r2, [r3, #7]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	7a1a      	ldrb	r2, [r3, #8]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	721a      	strb	r2, [r3, #8]
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007136:	b480      	push	{r7}
 8007138:	b087      	sub	sp, #28
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	785a      	ldrb	r2, [r3, #1]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	789a      	ldrb	r2, [r3, #2]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	78da      	ldrb	r2, [r3, #3]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3304      	adds	r3, #4
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3305      	adds	r3, #5
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	b29b      	uxth	r3, r3
 800717a:	4313      	orrs	r3, r2
 800717c:	b29a      	uxth	r2, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	799a      	ldrb	r2, [r3, #6]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	889b      	ldrh	r3, [r3, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800719a:	d804      	bhi.n	80071a6 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a4:	d901      	bls.n	80071aa <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80071a6:	2303      	movs	r3, #3
 80071a8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d136      	bne.n	8007222 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	78db      	ldrb	r3, [r3, #3]
 80071b8:	f003 0303 	and.w	r3, r3, #3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d108      	bne.n	80071d2 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	889b      	ldrh	r3, [r3, #4]
 80071c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071c8:	f240 8097 	bls.w	80072fa <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80071cc:	2303      	movs	r3, #3
 80071ce:	75fb      	strb	r3, [r7, #23]
 80071d0:	e093      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	78db      	ldrb	r3, [r3, #3]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d107      	bne.n	80071ee <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	889b      	ldrh	r3, [r3, #4]
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	f240 8089 	bls.w	80072fa <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80071e8:	2303      	movs	r3, #3
 80071ea:	75fb      	strb	r3, [r7, #23]
 80071ec:	e085      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	78db      	ldrb	r3, [r3, #3]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d005      	beq.n	8007206 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	78db      	ldrb	r3, [r3, #3]
 80071fe:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007202:	2b03      	cmp	r3, #3
 8007204:	d10a      	bne.n	800721c <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	799b      	ldrb	r3, [r3, #6]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <USBH_ParseEPDesc+0xe0>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	799b      	ldrb	r3, [r3, #6]
 8007212:	2b10      	cmp	r3, #16
 8007214:	d970      	bls.n	80072f8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007216:	2303      	movs	r3, #3
 8007218:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800721a:	e06d      	b.n	80072f8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800721c:	2303      	movs	r3, #3
 800721e:	75fb      	strb	r3, [r7, #23]
 8007220:	e06b      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007228:	2b01      	cmp	r3, #1
 800722a:	d13c      	bne.n	80072a6 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	78db      	ldrb	r3, [r3, #3]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d005      	beq.n	8007244 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	78db      	ldrb	r3, [r3, #3]
 800723c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	889b      	ldrh	r3, [r3, #4]
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d956      	bls.n	80072fa <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800724c:	2303      	movs	r3, #3
 800724e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007250:	e053      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	78db      	ldrb	r3, [r3, #3]
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10e      	bne.n	800727c <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	799b      	ldrb	r3, [r3, #6]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800726a:	2b10      	cmp	r3, #16
 800726c:	d803      	bhi.n	8007276 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	d941      	bls.n	80072fa <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8007276:	2303      	movs	r3, #3
 8007278:	75fb      	strb	r3, [r7, #23]
 800727a:	e03e      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	78db      	ldrb	r3, [r3, #3]
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	2b03      	cmp	r3, #3
 8007286:	d10b      	bne.n	80072a0 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	799b      	ldrb	r3, [r3, #6]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d004      	beq.n	800729a <USBH_ParseEPDesc+0x164>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	889b      	ldrh	r3, [r3, #4]
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007298:	d32f      	bcc.n	80072fa <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800729a:	2303      	movs	r3, #3
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	e02c      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80072a0:	2303      	movs	r3, #3
 80072a2:	75fb      	strb	r3, [r7, #23]
 80072a4:	e029      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d120      	bne.n	80072f2 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	78db      	ldrb	r3, [r3, #3]
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	889b      	ldrh	r3, [r3, #4]
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d01a      	beq.n	80072fa <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80072c4:	2303      	movs	r3, #3
 80072c6:	75fb      	strb	r3, [r7, #23]
 80072c8:	e017      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	78db      	ldrb	r3, [r3, #3]
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d10a      	bne.n	80072ec <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	799b      	ldrb	r3, [r3, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <USBH_ParseEPDesc+0x1b0>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	889b      	ldrh	r3, [r3, #4]
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d909      	bls.n	80072fa <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80072e6:	2303      	movs	r3, #3
 80072e8:	75fb      	strb	r3, [r7, #23]
 80072ea:	e006      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80072ec:	2303      	movs	r3, #3
 80072ee:	75fb      	strb	r3, [r7, #23]
 80072f0:	e003      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80072f2:	2303      	movs	r3, #3
 80072f4:	75fb      	strb	r3, [r7, #23]
 80072f6:	e000      	b.n	80072fa <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80072f8:	bf00      	nop
  }

  return status;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b03      	cmp	r3, #3
 800731e:	d120      	bne.n	8007362 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	1e9a      	subs	r2, r3, #2
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	4293      	cmp	r3, r2
 800732a:	bf28      	it	cs
 800732c:	4613      	movcs	r3, r2
 800732e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3302      	adds	r3, #2
 8007334:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007336:	2300      	movs	r3, #0
 8007338:	82fb      	strh	r3, [r7, #22]
 800733a:	e00b      	b.n	8007354 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800733c:	8afb      	ldrh	r3, [r7, #22]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	3301      	adds	r3, #1
 800734c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800734e:	8afb      	ldrh	r3, [r7, #22]
 8007350:	3302      	adds	r3, #2
 8007352:	82fb      	strh	r3, [r7, #22]
 8007354:	8afa      	ldrh	r2, [r7, #22]
 8007356:	8abb      	ldrh	r3, [r7, #20]
 8007358:	429a      	cmp	r2, r3
 800735a:	d3ef      	bcc.n	800733c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
  }
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	881a      	ldrh	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	b29b      	uxth	r3, r3
 8007382:	4413      	add	r3, r2
 8007384:	b29a      	uxth	r2, r3
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4413      	add	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007396:	68fb      	ldr	r3, [r7, #12]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80073b2:	2301      	movs	r3, #1
 80073b4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	789b      	ldrb	r3, [r3, #2]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d002      	beq.n	80073c4 <USBH_CtlReq+0x20>
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d00f      	beq.n	80073e2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80073c2:	e027      	b.n	8007414 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2201      	movs	r2, #1
 80073d4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2202      	movs	r2, #2
 80073da:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80073dc:	2301      	movs	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
      break;
 80073e0:	e018      	b.n	8007414 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f81c 	bl	8007420 <USBH_HandleControl>
 80073e8:	4603      	mov	r3, r0
 80073ea:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <USBH_CtlReq+0x54>
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d106      	bne.n	8007406 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	761a      	strb	r2, [r3, #24]
      break;
 8007404:	e005      	b.n	8007412 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d102      	bne.n	8007412 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	709a      	strb	r2, [r3, #2]
      break;
 8007412:	bf00      	nop
  }
  return status;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af02      	add	r7, sp, #8
 8007426:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007428:	2301      	movs	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800742c:	2300      	movs	r3, #0
 800742e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	7e1b      	ldrb	r3, [r3, #24]
 8007434:	3b01      	subs	r3, #1
 8007436:	2b0a      	cmp	r3, #10
 8007438:	f200 8156 	bhi.w	80076e8 <USBH_HandleControl+0x2c8>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <USBH_HandleControl+0x24>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007471 	.word	0x08007471
 8007448:	0800748b 	.word	0x0800748b
 800744c:	080074f5 	.word	0x080074f5
 8007450:	0800751b 	.word	0x0800751b
 8007454:	08007553 	.word	0x08007553
 8007458:	0800757d 	.word	0x0800757d
 800745c:	080075cf 	.word	0x080075cf
 8007460:	080075f1 	.word	0x080075f1
 8007464:	0800762d 	.word	0x0800762d
 8007468:	08007653 	.word	0x08007653
 800746c:	08007691 	.word	0x08007691
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f103 0110 	add.w	r1, r3, #16
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	795b      	ldrb	r3, [r3, #5]
 800747a:	461a      	mov	r2, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f943 	bl	8007708 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2202      	movs	r2, #2
 8007486:	761a      	strb	r2, [r3, #24]
      break;
 8007488:	e139      	b.n	80076fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	795b      	ldrb	r3, [r3, #5]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fcc5 	bl	8007e20 <USBH_LL_GetURBState>
 8007496:	4603      	mov	r3, r0
 8007498:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d11e      	bne.n	80074de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	7c1b      	ldrb	r3, [r3, #16]
 80074a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	8adb      	ldrh	r3, [r3, #22]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80074b2:	7b7b      	ldrb	r3, [r7, #13]
 80074b4:	2b80      	cmp	r3, #128	; 0x80
 80074b6:	d103      	bne.n	80074c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2203      	movs	r2, #3
 80074bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80074be:	e115      	b.n	80076ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2205      	movs	r2, #5
 80074c4:	761a      	strb	r2, [r3, #24]
      break;
 80074c6:	e111      	b.n	80076ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80074c8:	7b7b      	ldrb	r3, [r7, #13]
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d103      	bne.n	80074d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2209      	movs	r2, #9
 80074d2:	761a      	strb	r2, [r3, #24]
      break;
 80074d4:	e10a      	b.n	80076ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2207      	movs	r2, #7
 80074da:	761a      	strb	r2, [r3, #24]
      break;
 80074dc:	e106      	b.n	80076ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d003      	beq.n	80074ec <USBH_HandleControl+0xcc>
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	f040 8100 	bne.w	80076ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	220b      	movs	r2, #11
 80074f0:	761a      	strb	r2, [r3, #24]
      break;
 80074f2:	e0fb      	b.n	80076ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6899      	ldr	r1, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	899a      	ldrh	r2, [r3, #12]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	791b      	ldrb	r3, [r3, #4]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f93a 	bl	8007786 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2204      	movs	r2, #4
 8007516:	761a      	strb	r2, [r3, #24]
      break;
 8007518:	e0f1      	b.n	80076fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	791b      	ldrb	r3, [r3, #4]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fc7d 	bl	8007e20 <USBH_LL_GetURBState>
 8007526:	4603      	mov	r3, r0
 8007528:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d102      	bne.n	8007536 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2209      	movs	r2, #9
 8007534:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	2b05      	cmp	r3, #5
 800753a:	d102      	bne.n	8007542 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800753c:	2303      	movs	r3, #3
 800753e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007540:	e0d6      	b.n	80076f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	2b04      	cmp	r3, #4
 8007546:	f040 80d3 	bne.w	80076f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	220b      	movs	r2, #11
 800754e:	761a      	strb	r2, [r3, #24]
      break;
 8007550:	e0ce      	b.n	80076f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6899      	ldr	r1, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	899a      	ldrh	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	795b      	ldrb	r3, [r3, #5]
 800755e:	2001      	movs	r0, #1
 8007560:	9000      	str	r0, [sp, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f8ea 	bl	800773c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800756e:	b29a      	uxth	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2206      	movs	r2, #6
 8007578:	761a      	strb	r2, [r3, #24]
      break;
 800757a:	e0c0      	b.n	80076fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	795b      	ldrb	r3, [r3, #5]
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fc4c 	bl	8007e20 <USBH_LL_GetURBState>
 8007588:	4603      	mov	r3, r0
 800758a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d103      	bne.n	800759a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2207      	movs	r2, #7
 8007596:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007598:	e0ac      	b.n	80076f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b05      	cmp	r3, #5
 800759e:	d105      	bne.n	80075ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	220c      	movs	r2, #12
 80075a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80075a6:	2303      	movs	r3, #3
 80075a8:	73fb      	strb	r3, [r7, #15]
      break;
 80075aa:	e0a3      	b.n	80076f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d103      	bne.n	80075ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2205      	movs	r2, #5
 80075b6:	761a      	strb	r2, [r3, #24]
      break;
 80075b8:	e09c      	b.n	80076f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b04      	cmp	r3, #4
 80075be:	f040 8099 	bne.w	80076f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	220b      	movs	r2, #11
 80075c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80075c8:	2302      	movs	r3, #2
 80075ca:	73fb      	strb	r3, [r7, #15]
      break;
 80075cc:	e092      	b.n	80076f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	791b      	ldrb	r3, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	2100      	movs	r1, #0
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f8d5 	bl	8007786 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2208      	movs	r2, #8
 80075ec:	761a      	strb	r2, [r3, #24]

      break;
 80075ee:	e086      	b.n	80076fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	791b      	ldrb	r3, [r3, #4]
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fc12 	bl	8007e20 <USBH_LL_GetURBState>
 80075fc:	4603      	mov	r3, r0
 80075fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d105      	bne.n	8007612 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	220d      	movs	r2, #13
 800760a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007610:	e072      	b.n	80076f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b04      	cmp	r3, #4
 8007616:	d103      	bne.n	8007620 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	220b      	movs	r2, #11
 800761c:	761a      	strb	r2, [r3, #24]
      break;
 800761e:	e06b      	b.n	80076f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	2b05      	cmp	r3, #5
 8007624:	d168      	bne.n	80076f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007626:	2303      	movs	r3, #3
 8007628:	73fb      	strb	r3, [r7, #15]
      break;
 800762a:	e065      	b.n	80076f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	795b      	ldrb	r3, [r3, #5]
 8007630:	2201      	movs	r2, #1
 8007632:	9200      	str	r2, [sp, #0]
 8007634:	2200      	movs	r2, #0
 8007636:	2100      	movs	r1, #0
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f87f 	bl	800773c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	220a      	movs	r2, #10
 800764e:	761a      	strb	r2, [r3, #24]
      break;
 8007650:	e055      	b.n	80076fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	795b      	ldrb	r3, [r3, #5]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fbe1 	bl	8007e20 <USBH_LL_GetURBState>
 800765e:	4603      	mov	r3, r0
 8007660:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d105      	bne.n	8007674 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	220d      	movs	r2, #13
 8007670:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007672:	e043      	b.n	80076fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d103      	bne.n	8007682 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2209      	movs	r2, #9
 800767e:	761a      	strb	r2, [r3, #24]
      break;
 8007680:	e03c      	b.n	80076fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d139      	bne.n	80076fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	220b      	movs	r2, #11
 800768c:	761a      	strb	r2, [r3, #24]
      break;
 800768e:	e035      	b.n	80076fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	7e5b      	ldrb	r3, [r3, #25]
 8007694:	3301      	adds	r3, #1
 8007696:	b2da      	uxtb	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	765a      	strb	r2, [r3, #25]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	7e5b      	ldrb	r3, [r3, #25]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d806      	bhi.n	80076b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80076b0:	e025      	b.n	80076fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076b8:	2106      	movs	r1, #6
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	795b      	ldrb	r3, [r3, #5]
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f90c 	bl	80078e8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	791b      	ldrb	r3, [r3, #4]
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f906 	bl	80078e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80076e2:	2302      	movs	r3, #2
 80076e4:	73fb      	strb	r3, [r7, #15]
      break;
 80076e6:	e00a      	b.n	80076fe <USBH_HandleControl+0x2de>

    default:
      break;
 80076e8:	bf00      	nop
 80076ea:	e008      	b.n	80076fe <USBH_HandleControl+0x2de>
      break;
 80076ec:	bf00      	nop
 80076ee:	e006      	b.n	80076fe <USBH_HandleControl+0x2de>
      break;
 80076f0:	bf00      	nop
 80076f2:	e004      	b.n	80076fe <USBH_HandleControl+0x2de>
      break;
 80076f4:	bf00      	nop
 80076f6:	e002      	b.n	80076fe <USBH_HandleControl+0x2de>
      break;
 80076f8:	bf00      	nop
 80076fa:	e000      	b.n	80076fe <USBH_HandleControl+0x2de>
      break;
 80076fc:	bf00      	nop
  }

  return status;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af04      	add	r7, sp, #16
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007716:	79f9      	ldrb	r1, [r7, #7]
 8007718:	2300      	movs	r3, #0
 800771a:	9303      	str	r3, [sp, #12]
 800771c:	2308      	movs	r3, #8
 800771e:	9302      	str	r3, [sp, #8]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	9301      	str	r3, [sp, #4]
 8007724:	2300      	movs	r3, #0
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	2300      	movs	r3, #0
 800772a:	2200      	movs	r2, #0
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 fb46 	bl	8007dbe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af04      	add	r7, sp, #16
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4611      	mov	r1, r2
 8007748:	461a      	mov	r2, r3
 800774a:	460b      	mov	r3, r1
 800774c:	80fb      	strh	r3, [r7, #6]
 800774e:	4613      	mov	r3, r2
 8007750:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007760:	7979      	ldrb	r1, [r7, #5]
 8007762:	7e3b      	ldrb	r3, [r7, #24]
 8007764:	9303      	str	r3, [sp, #12]
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	9302      	str	r3, [sp, #8]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	2301      	movs	r3, #1
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	2300      	movs	r3, #0
 8007774:	2200      	movs	r2, #0
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 fb21 	bl	8007dbe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af04      	add	r7, sp, #16
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	4611      	mov	r1, r2
 8007792:	461a      	mov	r2, r3
 8007794:	460b      	mov	r3, r1
 8007796:	80fb      	strh	r3, [r7, #6]
 8007798:	4613      	mov	r3, r2
 800779a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800779c:	7979      	ldrb	r1, [r7, #5]
 800779e:	2300      	movs	r3, #0
 80077a0:	9303      	str	r3, [sp, #12]
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	9302      	str	r3, [sp, #8]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	2301      	movs	r3, #1
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	2300      	movs	r3, #0
 80077b0:	2201      	movs	r2, #1
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fb03 	bl	8007dbe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80077b8:	2300      	movs	r3, #0

}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b088      	sub	sp, #32
 80077c6:	af04      	add	r7, sp, #16
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	4611      	mov	r1, r2
 80077ce:	461a      	mov	r2, r3
 80077d0:	460b      	mov	r3, r1
 80077d2:	80fb      	strh	r3, [r7, #6]
 80077d4:	4613      	mov	r3, r2
 80077d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80077e6:	7979      	ldrb	r1, [r7, #5]
 80077e8:	7e3b      	ldrb	r3, [r7, #24]
 80077ea:	9303      	str	r3, [sp, #12]
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	9302      	str	r3, [sp, #8]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	2301      	movs	r3, #1
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	2302      	movs	r3, #2
 80077fa:	2200      	movs	r2, #0
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fade 	bl	8007dbe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af04      	add	r7, sp, #16
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4611      	mov	r1, r2
 8007818:	461a      	mov	r2, r3
 800781a:	460b      	mov	r3, r1
 800781c:	80fb      	strh	r3, [r7, #6]
 800781e:	4613      	mov	r3, r2
 8007820:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007822:	7979      	ldrb	r1, [r7, #5]
 8007824:	2300      	movs	r3, #0
 8007826:	9303      	str	r3, [sp, #12]
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	9302      	str	r3, [sp, #8]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	2301      	movs	r3, #1
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	2302      	movs	r3, #2
 8007836:	2201      	movs	r2, #1
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fac0 	bl	8007dbe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af04      	add	r7, sp, #16
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	4608      	mov	r0, r1
 8007852:	4611      	mov	r1, r2
 8007854:	461a      	mov	r2, r3
 8007856:	4603      	mov	r3, r0
 8007858:	70fb      	strb	r3, [r7, #3]
 800785a:	460b      	mov	r3, r1
 800785c:	70bb      	strb	r3, [r7, #2]
 800785e:	4613      	mov	r3, r2
 8007860:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007862:	7878      	ldrb	r0, [r7, #1]
 8007864:	78ba      	ldrb	r2, [r7, #2]
 8007866:	78f9      	ldrb	r1, [r7, #3]
 8007868:	8b3b      	ldrh	r3, [r7, #24]
 800786a:	9302      	str	r3, [sp, #8]
 800786c:	7d3b      	ldrb	r3, [r7, #20]
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	7c3b      	ldrb	r3, [r7, #16]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4603      	mov	r3, r0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa53 	bl	8007d22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	460b      	mov	r3, r1
 8007890:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa72 	bl	8007d80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b084      	sub	sp, #16
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f836 	bl	8007924 <USBH_GetFreePipe>
 80078b8:	4603      	mov	r3, r0
 80078ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80078bc:	89fb      	ldrh	r3, [r7, #14]
 80078be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00a      	beq.n	80078dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80078c6:	78fa      	ldrb	r2, [r7, #3]
 80078c8:	89fb      	ldrh	r3, [r7, #14]
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	33e0      	adds	r3, #224	; 0xe0
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80078dc:	89fb      	ldrh	r3, [r7, #14]
 80078de:	b2db      	uxtb	r3, r3
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	2b0f      	cmp	r3, #15
 80078f8:	d80d      	bhi.n	8007916 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	33e0      	adds	r3, #224	; 0xe0
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	33e0      	adds	r3, #224	; 0xe0
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	440b      	add	r3, r1
 8007914:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
 8007934:	e00f      	b.n	8007956 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	33e0      	adds	r3, #224	; 0xe0
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d102      	bne.n	8007950 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	b29b      	uxth	r3, r3
 800794e:	e007      	b.n	8007960 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	3301      	adds	r3, #1
 8007954:	73fb      	strb	r3, [r7, #15]
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	2b0f      	cmp	r3, #15
 800795a:	d9ec      	bls.n	8007936 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800795c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007970:	2201      	movs	r2, #1
 8007972:	490e      	ldr	r1, [pc, #56]	; (80079ac <MX_USB_HOST_Init+0x40>)
 8007974:	480e      	ldr	r0, [pc, #56]	; (80079b0 <MX_USB_HOST_Init+0x44>)
 8007976:	f7fe fb05 	bl	8005f84 <USBH_Init>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007980:	f7f8 ff9a 	bl	80008b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007984:	490b      	ldr	r1, [pc, #44]	; (80079b4 <MX_USB_HOST_Init+0x48>)
 8007986:	480a      	ldr	r0, [pc, #40]	; (80079b0 <MX_USB_HOST_Init+0x44>)
 8007988:	f7fe fba9 	bl	80060de <USBH_RegisterClass>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007992:	f7f8 ff91 	bl	80008b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007996:	4806      	ldr	r0, [pc, #24]	; (80079b0 <MX_USB_HOST_Init+0x44>)
 8007998:	f7fe fc2d 	bl	80061f6 <USBH_Start>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80079a2:	f7f8 ff89 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80079a6:	bf00      	nop
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	080079cd 	.word	0x080079cd
 80079b0:	20000158 	.word	0x20000158
 80079b4:	20000018 	.word	0x20000018

080079b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80079bc:	4802      	ldr	r0, [pc, #8]	; (80079c8 <MX_USB_HOST_Process+0x10>)
 80079be:	f7fe fc2b 	bl	8006218 <USBH_Process>
}
 80079c2:	bf00      	nop
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000158 	.word	0x20000158

080079cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80079d8:	78fb      	ldrb	r3, [r7, #3]
 80079da:	3b01      	subs	r3, #1
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d819      	bhi.n	8007a14 <USBH_UserProcess+0x48>
 80079e0:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <USBH_UserProcess+0x1c>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	08007a15 	.word	0x08007a15
 80079ec:	08007a05 	.word	0x08007a05
 80079f0:	08007a15 	.word	0x08007a15
 80079f4:	08007a0d 	.word	0x08007a0d
 80079f8:	080079fd 	.word	0x080079fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80079fc:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <USBH_UserProcess+0x58>)
 80079fe:	2203      	movs	r2, #3
 8007a00:	701a      	strb	r2, [r3, #0]
  break;
 8007a02:	e008      	b.n	8007a16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007a04:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <USBH_UserProcess+0x58>)
 8007a06:	2202      	movs	r2, #2
 8007a08:	701a      	strb	r2, [r3, #0]
  break;
 8007a0a:	e004      	b.n	8007a16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <USBH_UserProcess+0x58>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	701a      	strb	r2, [r3, #0]
  break;
 8007a12:	e000      	b.n	8007a16 <USBH_UserProcess+0x4a>

  default:
  break;
 8007a14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000530 	.word	0x20000530

08007a28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a30:	f107 0314 	add.w	r3, r7, #20
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	609a      	str	r2, [r3, #8]
 8007a3c:	60da      	str	r2, [r3, #12]
 8007a3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a48:	d147      	bne.n	8007ada <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <HAL_HCD_MspInit+0xbc>)
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	4a24      	ldr	r2, [pc, #144]	; (8007ae4 <HAL_HCD_MspInit+0xbc>)
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	6313      	str	r3, [r2, #48]	; 0x30
 8007a5a:	4b22      	ldr	r3, [pc, #136]	; (8007ae4 <HAL_HCD_MspInit+0xbc>)
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007a74:	f107 0314 	add.w	r3, r7, #20
 8007a78:	4619      	mov	r1, r3
 8007a7a:	481b      	ldr	r0, [pc, #108]	; (8007ae8 <HAL_HCD_MspInit+0xc0>)
 8007a7c:	f7f9 fa38 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007a80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a86:	2302      	movs	r3, #2
 8007a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a92:	230a      	movs	r3, #10
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a96:	f107 0314 	add.w	r3, r7, #20
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4812      	ldr	r0, [pc, #72]	; (8007ae8 <HAL_HCD_MspInit+0xc0>)
 8007a9e:	f7f9 fa27 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007aa2:	4b10      	ldr	r3, [pc, #64]	; (8007ae4 <HAL_HCD_MspInit+0xbc>)
 8007aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa6:	4a0f      	ldr	r2, [pc, #60]	; (8007ae4 <HAL_HCD_MspInit+0xbc>)
 8007aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aac:	6353      	str	r3, [r2, #52]	; 0x34
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <HAL_HCD_MspInit+0xbc>)
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	4a0b      	ldr	r2, [pc, #44]	; (8007ae4 <HAL_HCD_MspInit+0xbc>)
 8007ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007abc:	6453      	str	r3, [r2, #68]	; 0x44
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <HAL_HCD_MspInit+0xbc>)
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007aca:	2200      	movs	r2, #0
 8007acc:	2100      	movs	r1, #0
 8007ace:	2043      	movs	r0, #67	; 0x43
 8007ad0:	f7f9 f9d7 	bl	8000e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ad4:	2043      	movs	r0, #67	; 0x43
 8007ad6:	f7f9 f9f0 	bl	8000eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ada:	bf00      	nop
 8007adc:	3728      	adds	r7, #40	; 0x28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	40020000 	.word	0x40020000

08007aec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe ff6b 	bl	80069d6 <USBH_LL_IncTimer>
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe ffa3 	bl	8006a62 <USBH_LL_Connect>
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe ffac 	bl	8006a90 <USBH_LL_Disconnect>
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe ff5d 	bl	8006a2a <USBH_LL_PortEnabled>
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe ff5d 	bl	8006a46 <USBH_LL_PortDisabled>
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d12a      	bne.n	8007bfc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ba6:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <USBH_LL_Init+0x74>)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a15      	ldr	r2, [pc, #84]	; (8007c08 <USBH_LL_Init+0x74>)
 8007bb2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <USBH_LL_Init+0x74>)
 8007bb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bbc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007bbe:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <USBH_LL_Init+0x74>)
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007bc4:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <USBH_LL_Init+0x74>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bca:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <USBH_LL_Init+0x74>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007bd0:	4b0d      	ldr	r3, [pc, #52]	; (8007c08 <USBH_LL_Init+0x74>)
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <USBH_LL_Init+0x74>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007bdc:	480a      	ldr	r0, [pc, #40]	; (8007c08 <USBH_LL_Init+0x74>)
 8007bde:	f7f9 fb3c 	bl	800125a <HAL_HCD_Init>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007be8:	f7f8 fe66 	bl	80008b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007bec:	4806      	ldr	r0, [pc, #24]	; (8007c08 <USBH_LL_Init+0x74>)
 8007bee:	f7f9 ff9d 	bl	8001b2c <HAL_HCD_GetCurrentFrame>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fe fede 	bl	80069b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20000534 	.word	0x20000534

08007c0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7f9 ff0a 	bl	8001a3c <HAL_HCD_Start>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 f95e 	bl	8007ef0 <USBH_Get_USB_Status>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7f9 ff12 	bl	8001a82 <HAL_HCD_Stop>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f943 	bl	8007ef0 <USBH_Get_USB_Status>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007c80:	2301      	movs	r3, #1
 8007c82:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7f9 ff5c 	bl	8001b48 <HAL_HCD_GetCurrentSpeed>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d00c      	beq.n	8007cb0 <USBH_LL_GetSpeed+0x38>
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d80d      	bhi.n	8007cb6 <USBH_LL_GetSpeed+0x3e>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <USBH_LL_GetSpeed+0x2c>
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d003      	beq.n	8007caa <USBH_LL_GetSpeed+0x32>
 8007ca2:	e008      	b.n	8007cb6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca8:	e008      	b.n	8007cbc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007caa:	2301      	movs	r3, #1
 8007cac:	73fb      	strb	r3, [r7, #15]
    break;
 8007cae:	e005      	b.n	8007cbc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb4:	e002      	b.n	8007cbc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cba:	bf00      	nop
  }
  return  speed;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7f9 feed 	bl	8001abc <HAL_HCD_ResetPort>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 f901 	bl	8007ef0 <USBH_Get_USB_Status>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	4611      	mov	r1, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7f9 fef5 	bl	8001b02 <HAL_HCD_HC_GetXferCount>
 8007d18:	4603      	mov	r3, r0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d22:	b590      	push	{r4, r7, lr}
 8007d24:	b089      	sub	sp, #36	; 0x24
 8007d26:	af04      	add	r7, sp, #16
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	461a      	mov	r2, r3
 8007d30:	4603      	mov	r3, r0
 8007d32:	70fb      	strb	r3, [r7, #3]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70bb      	strb	r3, [r7, #2]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d4a:	787c      	ldrb	r4, [r7, #1]
 8007d4c:	78ba      	ldrb	r2, [r7, #2]
 8007d4e:	78f9      	ldrb	r1, [r7, #3]
 8007d50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d52:	9302      	str	r3, [sp, #8]
 8007d54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	4623      	mov	r3, r4
 8007d62:	f7f9 fae1 	bl	8001328 <HAL_HCD_HC_Init>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 f8bf 	bl	8007ef0 <USBH_Get_USB_Status>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd90      	pop	{r4, r7, pc}

08007d80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7f9 fb7a 	bl	8001498 <HAL_HCD_HC_Halt>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f8a0 	bl	8007ef0 <USBH_Get_USB_Status>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007dbe:	b590      	push	{r4, r7, lr}
 8007dc0:	b089      	sub	sp, #36	; 0x24
 8007dc2:	af04      	add	r7, sp, #16
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4603      	mov	r3, r0
 8007dce:	70fb      	strb	r3, [r7, #3]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70bb      	strb	r3, [r7, #2]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007de6:	787c      	ldrb	r4, [r7, #1]
 8007de8:	78ba      	ldrb	r2, [r7, #2]
 8007dea:	78f9      	ldrb	r1, [r7, #3]
 8007dec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007df0:	9303      	str	r3, [sp, #12]
 8007df2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007df4:	9302      	str	r3, [sp, #8]
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	4623      	mov	r3, r4
 8007e02:	f7f9 fb6d 	bl	80014e0 <HAL_HCD_HC_SubmitRequest>
 8007e06:	4603      	mov	r3, r0
 8007e08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 f86f 	bl	8007ef0 <USBH_Get_USB_Status>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd90      	pop	{r4, r7, pc}

08007e20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e32:	78fa      	ldrb	r2, [r7, #3]
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7f9 fe4e 	bl	8001ad8 <HAL_HCD_HC_GetURBState>
 8007e3c:	4603      	mov	r3, r0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d103      	bne.n	8007e64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f872 	bl	8007f48 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007e64:	20c8      	movs	r0, #200	; 0xc8
 8007e66:	f7f8 ff0d 	bl	8000c84 <HAL_Delay>
  return USBH_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
 8007e80:	4613      	mov	r3, r2
 8007e82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	4613      	mov	r3, r2
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	3317      	adds	r3, #23
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	68f9      	ldr	r1, [r7, #12]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	440b      	add	r3, r1
 8007eb0:	333c      	adds	r3, #60	; 0x3c
 8007eb2:	78ba      	ldrb	r2, [r7, #2]
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	e009      	b.n	8007ecc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007eb8:	78fa      	ldrb	r2, [r7, #3]
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	333d      	adds	r3, #61	; 0x3d
 8007ec8:	78ba      	ldrb	r2, [r7, #2]
 8007eca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7f8 fece 	bl	8000c84 <HAL_Delay>
}
 8007ee8:	bf00      	nop
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d817      	bhi.n	8007f34 <USBH_Get_USB_Status+0x44>
 8007f04:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <USBH_Get_USB_Status+0x1c>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	08007f23 	.word	0x08007f23
 8007f14:	08007f29 	.word	0x08007f29
 8007f18:	08007f2f 	.word	0x08007f2f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f20:	e00b      	b.n	8007f3a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007f22:	2302      	movs	r3, #2
 8007f24:	73fb      	strb	r3, [r7, #15]
    break;
 8007f26:	e008      	b.n	8007f3a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f2c:	e005      	b.n	8007f3a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	73fb      	strb	r3, [r7, #15]
    break;
 8007f32:	e002      	b.n	8007f3a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007f34:	2302      	movs	r3, #2
 8007f36:	73fb      	strb	r3, [r7, #15]
    break;
 8007f38:	bf00      	nop
  }
  return usb_status;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d102      	bne.n	8007f62 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
 8007f60:	e001      	b.n	8007f66 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007f62:	2301      	movs	r3, #1
 8007f64:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	4803      	ldr	r0, [pc, #12]	; (8007f7c <MX_DriverVbusFS+0x34>)
 8007f6e:	f7f9 f95b 	bl	8001228 <HAL_GPIO_WritePin>
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	40020800 	.word	0x40020800

08007f80 <malloc>:
 8007f80:	4b02      	ldr	r3, [pc, #8]	; (8007f8c <malloc+0xc>)
 8007f82:	4601      	mov	r1, r0
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	f000 b82b 	b.w	8007fe0 <_malloc_r>
 8007f8a:	bf00      	nop
 8007f8c:	20000084 	.word	0x20000084

08007f90 <free>:
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <free+0xc>)
 8007f92:	4601      	mov	r1, r0
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	f000 b8f3 	b.w	8008180 <_free_r>
 8007f9a:	bf00      	nop
 8007f9c:	20000084 	.word	0x20000084

08007fa0 <sbrk_aligned>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	4e0e      	ldr	r6, [pc, #56]	; (8007fdc <sbrk_aligned+0x3c>)
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	6831      	ldr	r1, [r6, #0]
 8007fa8:	4605      	mov	r5, r0
 8007faa:	b911      	cbnz	r1, 8007fb2 <sbrk_aligned+0x12>
 8007fac:	f000 f8ac 	bl	8008108 <_sbrk_r>
 8007fb0:	6030      	str	r0, [r6, #0]
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f000 f8a7 	bl	8008108 <_sbrk_r>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	d00a      	beq.n	8007fd4 <sbrk_aligned+0x34>
 8007fbe:	1cc4      	adds	r4, r0, #3
 8007fc0:	f024 0403 	bic.w	r4, r4, #3
 8007fc4:	42a0      	cmp	r0, r4
 8007fc6:	d007      	beq.n	8007fd8 <sbrk_aligned+0x38>
 8007fc8:	1a21      	subs	r1, r4, r0
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f000 f89c 	bl	8008108 <_sbrk_r>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d101      	bne.n	8007fd8 <sbrk_aligned+0x38>
 8007fd4:	f04f 34ff 	mov.w	r4, #4294967295
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	20000918 	.word	0x20000918

08007fe0 <_malloc_r>:
 8007fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe4:	1ccd      	adds	r5, r1, #3
 8007fe6:	f025 0503 	bic.w	r5, r5, #3
 8007fea:	3508      	adds	r5, #8
 8007fec:	2d0c      	cmp	r5, #12
 8007fee:	bf38      	it	cc
 8007ff0:	250c      	movcc	r5, #12
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	db01      	blt.n	8007ffc <_malloc_r+0x1c>
 8007ff8:	42a9      	cmp	r1, r5
 8007ffa:	d905      	bls.n	8008008 <_malloc_r+0x28>
 8007ffc:	230c      	movs	r3, #12
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	2600      	movs	r6, #0
 8008002:	4630      	mov	r0, r6
 8008004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008008:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080dc <_malloc_r+0xfc>
 800800c:	f000 f868 	bl	80080e0 <__malloc_lock>
 8008010:	f8d8 3000 	ldr.w	r3, [r8]
 8008014:	461c      	mov	r4, r3
 8008016:	bb5c      	cbnz	r4, 8008070 <_malloc_r+0x90>
 8008018:	4629      	mov	r1, r5
 800801a:	4638      	mov	r0, r7
 800801c:	f7ff ffc0 	bl	8007fa0 <sbrk_aligned>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	4604      	mov	r4, r0
 8008024:	d155      	bne.n	80080d2 <_malloc_r+0xf2>
 8008026:	f8d8 4000 	ldr.w	r4, [r8]
 800802a:	4626      	mov	r6, r4
 800802c:	2e00      	cmp	r6, #0
 800802e:	d145      	bne.n	80080bc <_malloc_r+0xdc>
 8008030:	2c00      	cmp	r4, #0
 8008032:	d048      	beq.n	80080c6 <_malloc_r+0xe6>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	4631      	mov	r1, r6
 8008038:	4638      	mov	r0, r7
 800803a:	eb04 0903 	add.w	r9, r4, r3
 800803e:	f000 f863 	bl	8008108 <_sbrk_r>
 8008042:	4581      	cmp	r9, r0
 8008044:	d13f      	bne.n	80080c6 <_malloc_r+0xe6>
 8008046:	6821      	ldr	r1, [r4, #0]
 8008048:	1a6d      	subs	r5, r5, r1
 800804a:	4629      	mov	r1, r5
 800804c:	4638      	mov	r0, r7
 800804e:	f7ff ffa7 	bl	8007fa0 <sbrk_aligned>
 8008052:	3001      	adds	r0, #1
 8008054:	d037      	beq.n	80080c6 <_malloc_r+0xe6>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	442b      	add	r3, r5
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	f8d8 3000 	ldr.w	r3, [r8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d038      	beq.n	80080d6 <_malloc_r+0xf6>
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	42a2      	cmp	r2, r4
 8008068:	d12b      	bne.n	80080c2 <_malloc_r+0xe2>
 800806a:	2200      	movs	r2, #0
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	e00f      	b.n	8008090 <_malloc_r+0xb0>
 8008070:	6822      	ldr	r2, [r4, #0]
 8008072:	1b52      	subs	r2, r2, r5
 8008074:	d41f      	bmi.n	80080b6 <_malloc_r+0xd6>
 8008076:	2a0b      	cmp	r2, #11
 8008078:	d917      	bls.n	80080aa <_malloc_r+0xca>
 800807a:	1961      	adds	r1, r4, r5
 800807c:	42a3      	cmp	r3, r4
 800807e:	6025      	str	r5, [r4, #0]
 8008080:	bf18      	it	ne
 8008082:	6059      	strne	r1, [r3, #4]
 8008084:	6863      	ldr	r3, [r4, #4]
 8008086:	bf08      	it	eq
 8008088:	f8c8 1000 	streq.w	r1, [r8]
 800808c:	5162      	str	r2, [r4, r5]
 800808e:	604b      	str	r3, [r1, #4]
 8008090:	4638      	mov	r0, r7
 8008092:	f104 060b 	add.w	r6, r4, #11
 8008096:	f000 f829 	bl	80080ec <__malloc_unlock>
 800809a:	f026 0607 	bic.w	r6, r6, #7
 800809e:	1d23      	adds	r3, r4, #4
 80080a0:	1af2      	subs	r2, r6, r3
 80080a2:	d0ae      	beq.n	8008002 <_malloc_r+0x22>
 80080a4:	1b9b      	subs	r3, r3, r6
 80080a6:	50a3      	str	r3, [r4, r2]
 80080a8:	e7ab      	b.n	8008002 <_malloc_r+0x22>
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	6862      	ldr	r2, [r4, #4]
 80080ae:	d1dd      	bne.n	800806c <_malloc_r+0x8c>
 80080b0:	f8c8 2000 	str.w	r2, [r8]
 80080b4:	e7ec      	b.n	8008090 <_malloc_r+0xb0>
 80080b6:	4623      	mov	r3, r4
 80080b8:	6864      	ldr	r4, [r4, #4]
 80080ba:	e7ac      	b.n	8008016 <_malloc_r+0x36>
 80080bc:	4634      	mov	r4, r6
 80080be:	6876      	ldr	r6, [r6, #4]
 80080c0:	e7b4      	b.n	800802c <_malloc_r+0x4c>
 80080c2:	4613      	mov	r3, r2
 80080c4:	e7cc      	b.n	8008060 <_malloc_r+0x80>
 80080c6:	230c      	movs	r3, #12
 80080c8:	603b      	str	r3, [r7, #0]
 80080ca:	4638      	mov	r0, r7
 80080cc:	f000 f80e 	bl	80080ec <__malloc_unlock>
 80080d0:	e797      	b.n	8008002 <_malloc_r+0x22>
 80080d2:	6025      	str	r5, [r4, #0]
 80080d4:	e7dc      	b.n	8008090 <_malloc_r+0xb0>
 80080d6:	605b      	str	r3, [r3, #4]
 80080d8:	deff      	udf	#255	; 0xff
 80080da:	bf00      	nop
 80080dc:	20000914 	.word	0x20000914

080080e0 <__malloc_lock>:
 80080e0:	4801      	ldr	r0, [pc, #4]	; (80080e8 <__malloc_lock+0x8>)
 80080e2:	f000 b84b 	b.w	800817c <__retarget_lock_acquire_recursive>
 80080e6:	bf00      	nop
 80080e8:	20000a58 	.word	0x20000a58

080080ec <__malloc_unlock>:
 80080ec:	4801      	ldr	r0, [pc, #4]	; (80080f4 <__malloc_unlock+0x8>)
 80080ee:	f000 b846 	b.w	800817e <__retarget_lock_release_recursive>
 80080f2:	bf00      	nop
 80080f4:	20000a58 	.word	0x20000a58

080080f8 <memset>:
 80080f8:	4402      	add	r2, r0
 80080fa:	4603      	mov	r3, r0
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d100      	bne.n	8008102 <memset+0xa>
 8008100:	4770      	bx	lr
 8008102:	f803 1b01 	strb.w	r1, [r3], #1
 8008106:	e7f9      	b.n	80080fc <memset+0x4>

08008108 <_sbrk_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d06      	ldr	r5, [pc, #24]	; (8008124 <_sbrk_r+0x1c>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	602b      	str	r3, [r5, #0]
 8008114:	f7f8 fcd2 	bl	8000abc <_sbrk>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_sbrk_r+0x1a>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_sbrk_r+0x1a>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	20000a54 	.word	0x20000a54

08008128 <__errno>:
 8008128:	4b01      	ldr	r3, [pc, #4]	; (8008130 <__errno+0x8>)
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20000084 	.word	0x20000084

08008134 <__libc_init_array>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	4d0d      	ldr	r5, [pc, #52]	; (800816c <__libc_init_array+0x38>)
 8008138:	4c0d      	ldr	r4, [pc, #52]	; (8008170 <__libc_init_array+0x3c>)
 800813a:	1b64      	subs	r4, r4, r5
 800813c:	10a4      	asrs	r4, r4, #2
 800813e:	2600      	movs	r6, #0
 8008140:	42a6      	cmp	r6, r4
 8008142:	d109      	bne.n	8008158 <__libc_init_array+0x24>
 8008144:	4d0b      	ldr	r5, [pc, #44]	; (8008174 <__libc_init_array+0x40>)
 8008146:	4c0c      	ldr	r4, [pc, #48]	; (8008178 <__libc_init_array+0x44>)
 8008148:	f000 f866 	bl	8008218 <_init>
 800814c:	1b64      	subs	r4, r4, r5
 800814e:	10a4      	asrs	r4, r4, #2
 8008150:	2600      	movs	r6, #0
 8008152:	42a6      	cmp	r6, r4
 8008154:	d105      	bne.n	8008162 <__libc_init_array+0x2e>
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	f855 3b04 	ldr.w	r3, [r5], #4
 800815c:	4798      	blx	r3
 800815e:	3601      	adds	r6, #1
 8008160:	e7ee      	b.n	8008140 <__libc_init_array+0xc>
 8008162:	f855 3b04 	ldr.w	r3, [r5], #4
 8008166:	4798      	blx	r3
 8008168:	3601      	adds	r6, #1
 800816a:	e7f2      	b.n	8008152 <__libc_init_array+0x1e>
 800816c:	08008254 	.word	0x08008254
 8008170:	08008254 	.word	0x08008254
 8008174:	08008254 	.word	0x08008254
 8008178:	08008258 	.word	0x08008258

0800817c <__retarget_lock_acquire_recursive>:
 800817c:	4770      	bx	lr

0800817e <__retarget_lock_release_recursive>:
 800817e:	4770      	bx	lr

08008180 <_free_r>:
 8008180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008182:	2900      	cmp	r1, #0
 8008184:	d044      	beq.n	8008210 <_free_r+0x90>
 8008186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800818a:	9001      	str	r0, [sp, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f1a1 0404 	sub.w	r4, r1, #4
 8008192:	bfb8      	it	lt
 8008194:	18e4      	addlt	r4, r4, r3
 8008196:	f7ff ffa3 	bl	80080e0 <__malloc_lock>
 800819a:	4a1e      	ldr	r2, [pc, #120]	; (8008214 <_free_r+0x94>)
 800819c:	9801      	ldr	r0, [sp, #4]
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	b933      	cbnz	r3, 80081b0 <_free_r+0x30>
 80081a2:	6063      	str	r3, [r4, #4]
 80081a4:	6014      	str	r4, [r2, #0]
 80081a6:	b003      	add	sp, #12
 80081a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081ac:	f7ff bf9e 	b.w	80080ec <__malloc_unlock>
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d908      	bls.n	80081c6 <_free_r+0x46>
 80081b4:	6825      	ldr	r5, [r4, #0]
 80081b6:	1961      	adds	r1, r4, r5
 80081b8:	428b      	cmp	r3, r1
 80081ba:	bf01      	itttt	eq
 80081bc:	6819      	ldreq	r1, [r3, #0]
 80081be:	685b      	ldreq	r3, [r3, #4]
 80081c0:	1949      	addeq	r1, r1, r5
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	e7ed      	b.n	80081a2 <_free_r+0x22>
 80081c6:	461a      	mov	r2, r3
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b10b      	cbz	r3, 80081d0 <_free_r+0x50>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d9fa      	bls.n	80081c6 <_free_r+0x46>
 80081d0:	6811      	ldr	r1, [r2, #0]
 80081d2:	1855      	adds	r5, r2, r1
 80081d4:	42a5      	cmp	r5, r4
 80081d6:	d10b      	bne.n	80081f0 <_free_r+0x70>
 80081d8:	6824      	ldr	r4, [r4, #0]
 80081da:	4421      	add	r1, r4
 80081dc:	1854      	adds	r4, r2, r1
 80081de:	42a3      	cmp	r3, r4
 80081e0:	6011      	str	r1, [r2, #0]
 80081e2:	d1e0      	bne.n	80081a6 <_free_r+0x26>
 80081e4:	681c      	ldr	r4, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	6053      	str	r3, [r2, #4]
 80081ea:	440c      	add	r4, r1
 80081ec:	6014      	str	r4, [r2, #0]
 80081ee:	e7da      	b.n	80081a6 <_free_r+0x26>
 80081f0:	d902      	bls.n	80081f8 <_free_r+0x78>
 80081f2:	230c      	movs	r3, #12
 80081f4:	6003      	str	r3, [r0, #0]
 80081f6:	e7d6      	b.n	80081a6 <_free_r+0x26>
 80081f8:	6825      	ldr	r5, [r4, #0]
 80081fa:	1961      	adds	r1, r4, r5
 80081fc:	428b      	cmp	r3, r1
 80081fe:	bf04      	itt	eq
 8008200:	6819      	ldreq	r1, [r3, #0]
 8008202:	685b      	ldreq	r3, [r3, #4]
 8008204:	6063      	str	r3, [r4, #4]
 8008206:	bf04      	itt	eq
 8008208:	1949      	addeq	r1, r1, r5
 800820a:	6021      	streq	r1, [r4, #0]
 800820c:	6054      	str	r4, [r2, #4]
 800820e:	e7ca      	b.n	80081a6 <_free_r+0x26>
 8008210:	b003      	add	sp, #12
 8008212:	bd30      	pop	{r4, r5, pc}
 8008214:	20000914 	.word	0x20000914

08008218 <_init>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	bf00      	nop
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr

08008224 <_fini>:
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008226:	bf00      	nop
 8008228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822a:	bc08      	pop	{r3}
 800822c:	469e      	mov	lr, r3
 800822e:	4770      	bx	lr
